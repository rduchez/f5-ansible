# Copyright 2016. F5 Networks, Inc. See End User License Agreement (EULA) for
# license terms. Notwithstanding anything to the contrary in the EULA, Licensee
# may copy and modify this software product for its internal business purposes.
# Further, Licensee may upload, publish and distribute the modified version of
# the software product on devcentral.f5.com.

cli script f5.iapp.1.5.1.cli {
 
#  Initialization proc for all templates.
#  Parameters "start" and "stop" or "end".
proc iapp_template { action } {
    switch $action {
        start {
            catch { tmsh::modify sys scriptd log-level debug }
            set ::clock_clicks [clock clicks]
            puts "\nStarting iApp $tmsh::app_template_name [clock format \
                [clock seconds] -format {%m/%d/%Y %T}]\n"
            tmsh::log info "Starting iApp template $tmsh::app_template_name"
        }
        stop -
        end {
            if { [info exists ::substa_debug] } {
                puts $::substa_debug
            }
            puts "\nEnding iApp $tmsh::app_template_name [clock format \
                [clock seconds] -format {%m/%d/%Y %T}]\nRun time [expr \
                { ([clock clicks] - $::clock_clicks) / 1000 }] msec\n"
            tmsh::log info "Ending iApp template $tmsh::app_template_name"
        }
    }
    set ::HTTP_CONTENT_TYPES { application/(css\|css-stylesheet\|doc\|excel\|javascript\|json\|lotus123\|mdb\|mpp\|msaccess\|msexcel\|ms-excel\|mspowerpoint\|ms-powerpoint\|msproject\|msword\|ms-word\|photoshop\|postscript\|powerpoint\|ps\|psd\|quarkexpress\|rtf\|txt\|visio\|vnd\\.excel\|vnd\\.msaccess\|vnd\\.ms-access\|vnd\\.msexcel\|vnd\\.ms-excel\|vnd\\.mspowerpoint\|vnd\\.ms-powerpoint\|vnd\\.ms-pps\|vnd\\.ms-project\|vnd\\.msword\|vnd\\.ms-word\|vnd\\.ms-works\|vnd\\.ms-works-db\|vnd\\.powerpoint\|vnd\\.visio\|vnd\\.wap\\.cmlscriptc\|vnd\\.wap\\.wmlc\|vnd\\.wap\\.xhtml\\+xml\|vnd\\.word\|vsd\|winword\|wks\|word\|x-excel\|xhtml\\+xml\|x-java-jnlp-file\|x-javascript\|x-json\|x-lotus123\|xls\|x-mdb\|xml\|x-mscardfile\|x-msclip\|x-msexcel\|x-ms-excel\|x-mspowerpoint\|x-msproject\|x-ms-project\|x-msword\|x-msworks-db\|x-msworks-wps\|x-photoshop\|x-postscript\|x-powerpoint\|x-ps\|x-quark-express\|x-rtf\|x-vermeer-rpc\|x-visio\|x-vsd\|x-wks\|x-word\|x-xls\|x-xml) image/(photoshop\|psd\|x-photoshop\|x-vsd) text/(css\|html\|javascript\|json\|plain\|postscript\|richtext\|rtf\|vnd\\.wap\\.wml\|vnd\\.wap\\.wmlscript\|wap\|wml\|x-component\|xml\|x-vcalendar\|x-vcard) }
}

proc iapp_is { args } {
    set up_var [lindex $args 0]
    upvar $up_var var
    if { [info exists var] } {
        foreach val [lrange $args 1 end] {
            if { [subst $var] eq $val } {
                return 1
            }
        }
    }
    return 0
}

proc iapp_substa { args } {
    upvar substa_in  argx \
          substa_out rval
    set   argx $args

    # check the explicit value first.
    # multiple layers of variable substitution requires multiple subst.
    # error occurs here if any of the substituted variables do not exist
    # valid wildcard (*) array entries will fail here first.
    uplevel {
        append ::substa_debug "\n$substa_in"
        if { [info exists [set substa_in]] } {
            set substa_out [subst $$substa_in]
            set substa_out [subst $substa_out]
        } else {
            # since explicit value did not exist, try a wildcard value.
            # substitute "*" as the array key and repeat.
            set substa_tmp [split $substa_in "()"]
            set substa_in "[lindex $substa_tmp 0](*)"
            append ::substa_debug "*"
            if { [info exists [set substa_in]] } {
                set substa_out [subst $$substa_in]
                set substa_out [subst $substa_out]
            } else {
                error "substa \"$substa_in\" array value not found"
            }
        }
    }
    return $rval
}

proc iapp_conf { args } {

    # Return value $object_name is set to the first word in $arg that
    # contains an underscore, since the position of the object name in
    # tmsh syntax is not consistent.
    set args [join $args]
    set object_name [lindex $args [lsearch -glob $args "*_*"]]

    # Global array ::tmsh_history persists between calls to iapp_conf
    # in order to suppress duplicate commands.
    if { ![info exists ::tmsh_history($args)] } {
        set ::tmsh_history($args) 1
        iapp_debug $args
        switch -exact -- [string range $args 0 5] {
            create { tmsh::create [string range $args 7 end] }
            modify { tmsh::modify [string range $args 7 end] }
            delete { tmsh::delete [string range $args 7 end] }
            default { error "iapp_conf illegal parameter" }
        }
    }
    return $object_name
}

proc iapp_make_safe_password { password } {
    return [string map { \' \\\' \" \\\" \{ \\\{ \} \\\} \; \\\; \| \\\| \# \\\# \  \\\  \\ \\\\ } $password]
}

proc iapp_pull { loc items_list } {
    upvar $items_list items
    if { [set item [lindex $items $loc]] != "" } {
        set items [lreplace $items $loc $loc]
    }
    return $item
}

proc iapp_process_flags { flags_array args_list } {
    upvar $flags_array flags
    upvar $args_list args

    if { [set dubdash [lsearch $args "--"]] != -1 } {
        set args [lreplace $args $dubdash $dubdash];
    } else {
        set dubdash end
    }

    foreach flag [array names flags] {
        while { [set ptr [lsearch [lrange $args 0 $dubdash] $flag]] != -1 } {
            set args [lreplace $args $ptr $ptr];

            # we want to run the code in the flags_array at the calling
            # proc's level so that the variables that it sets up are
            # available there.
            set access_var [format "$%s(%s)" $flags_array $flag]
            set command [subst -nocommands { set ptr $ptr ; subst $access_var }]

            uplevel 1 $command
        }
    }
    return $args
}

proc iapp_tmos_version { args } {
    set cversion [tmsh::version]
    if { $cversion eq "" } {
        tmsh::log err "unable to determine TMOS version"
        error "unable to determine TMOS version"
    }

    # if no op+version was specified, just return the version
    if { $args eq "" } { return $cversion }
    if { [llength $args] > 2 } {
        error "Too many arguments"
    }

    set op [lindex $args 0]; # operator
    set NOTFOUND -1
    # constrain to valid operators - adding more is fine as long as
    # they are supported by [expr] (and makes sense)
    if { [lsearch -exact { < > <= >= == != } $op] == $NOTFOUND } {
        tmsh::log err "illegal operator: $op"
        error "illegal operator: $op"
    }

    set tversion [lindex $args 1]; # target version
    # one or two decimal digits, optionally followed by 0-2 complete groups of
    # dots followed by one or two decimal digits with nothing before or after
    set regex {^\d{1,2}(\.\d{1,2}){0,2}$}
    if { ! [regexp -- $regex $tversion] } {
        tmsh::log err "cannot parse version from: $tversion"
        error "cannot parse version from: $tversion"
    }

    # p=>prefix, c=>current, t=>target
    foreach p { c t } {
        # extract major/minor/point components
        scan [set [set p]version] "%d.%d.%d" [set p]mjr [set p]mnr [set p]pnt
        # ensure that these are each set to at least 0
        foreach level { mjr mnr pnt } {
            if { ! [info exists [set p]${level}] } { set [set p]${level} 0 }
        }
        # turn them into one big number that we can compare
        # leave room in-between just to be safe
        set [set p]num [expr {
            [set [set p]mjr]*1000000 +
            [set [set p]mnr]*10000 +
            [set [set p]pnt]*100
        }]
    }
    # a simple numeric comparison is all that is needed at this point
    return [eval expr $cnum $op $tnum ]
}

proc iapp_safe_display { args } {
    # strings sent to APL must be truncated to 65535 bytes, see BZ435592
    if { [string length [set [set args]]] > 65535 } {
        set last_newline [string last "\n" [set [set args]] 65500]
        return "[string range [set [set args]] 0 $last_newline]Error: Too many items for display"
    } else {
        return [set [set args]]
    }
}

proc iapp_get_items { args } {

    # Set default values.
    set error_msg  "iapp_get_items $args:"
    set do_binary  0
    set nocomplain 0
    set items      ""
    set join_char  "\n"
    set recursive  "recursive"
    set com_dir    "/Common"
    set loc_dir    "[tmsh::pwd]"

    # Set up flag-related work.
    array set flags  {
        -exists      { [set do_binary 1] }
        -nocomplain  { [set nocomplain 1] }
        -list        { [set join_char " "] }
        -norecursive { [set recursive ""] }
        -local       { [set com_dir   ""] }
        -dir         { [set loc_dir      [iapp_pull $ptr args]] }
        -filter      { [set filter_field [iapp_pull $ptr args]] \
                       [set filter_op    [iapp_pull $ptr args]] \
                       [set filter_value [iapp_pull $ptr args]] }
    }
    iapp_process_flags flags args

    # Get system object names in all requested directories.
    set save_dir [tmsh::pwd]
    foreach dir [lsort -unique "$com_dir $loc_dir"] {
        tmsh::cd $dir
        set tmsh_rval [catch {
            foreach obj [tmsh::get_config $args $recursive] {

                if { [info exists filter_field] } {
                    if { $filter_field eq "NAME" } {
                        set val [tmsh::get_name $obj]
                    } else {
                        # If get_field_value throws error, assume "none" value
                        if { [catch {
                            set val [tmsh::get_field_value $obj $filter_field]
                            # strip quotes per BZ442531
                            set val [string map {\" ""} $val]
                        }]} { set val none }
                    }
                    # Non-Tcl operators =~ and !~ added for extra flexibility
                    if { $filter_op eq "=~" } {
                        set filter "\[regexp \"$filter_value\" \"$val\"\]"
                    } elseif { $filter_op eq "!~" } {
                        set filter "!\[regexp \"$filter_value\" \"$val\"\]"
                    } else {
                        set filter "\\\"$val\\\" $filter_op \\\"$filter_value\\\""
                    }
                    # If filter fails, skip to next object
                    if { ![eval expr $filter] } {
                        continue
                    }
                }
                # string map catches /Common added by ltm profile ntlm,
                # which is unlike all other ltm profile return values.
                lappend items $dir/[string map {/Common/ ""} [tmsh::get_name $obj]]
            }
        } err ]
    }
    tmsh::cd $save_dir

    # array keys: $do_binary,$tmsh_rval,$nocomplain. Do not insert whitespace.
    array set rval {
        0,0,0 {[join $items $join_char]}
        0,0,1 {[join $items $join_char]}
        0,1,0 {[error "$error_msg $err"]}
        0,1,1 {}
        1,0,0 {[llength $items]}
        1,0,1 {[llength $items]}
        1,1,0 {0}
        1,1,1 {0}
    }

    return [subst $rval($do_binary,$tmsh_rval,$nocomplain)]
}

proc iapp_get_provisioned { args } {

    array set lnum {
        none      0
        minimum   1
        nominal   2
        dedicated 3
    }

    # Set defaults.
    set required minimum
    set do_binary 1

    # Set up flag-related work.
    array set flags  {
        -is          { [set required [iapp_pull $ptr args]] }
        -level       { [set do_binary 0] }
    }
    iapp_process_flags flags args
    if { [llength $args] > 1 } {
        error "Too many arguments"
    }

    # If checking for AM provisioning on TMOS < 11.4,
    # check for WAM provisioning instead.
    if { $args eq "am" && [iapp_tmos_version < 11.4] } {
        set args "wam"
    }

    # Get the provisioning level. If blank, assume none.
    # Proc only checks 1 module at a time, so only 1 object is returned.
    if { [catch {
        set obj [tmsh::get_config sys provision $args]
        set level [tmsh::get_field_value [lindex $obj 0] level]
    }]} { set level none }

    if { $do_binary } {
        return [expr { $lnum($level) >= $lnum($required) }]
    } else {
        return $level
    }
}

proc iapp_get_user { args } {

    # Set defaults.
    set do_role 0
    set do_binary 0

    # Set up flag-related work.
    array set flags  {
        -is_admin    { [set do_binary 1] }
    }
    iapp_process_flags flags args
    if { [llength $args] > 1 } {
        error "Too many arguments"
    }

    # Show user auth was introduced in v11.6
    set user "unknown"
    catch {
        set user [tmsh::show auth user field-fmt]
    } err
    if { $do_binary } {
        return [expr { $user == "unknown"
        || [string first "role " $user] == -1
        || [string first "role admin" $user] != -1
        || [string first "role resource-admin" $user] != -1 }]
    } else {
        return $user
    }
}

proc iapp_destination { args } {
    # Set defaults. Flag actions may overwrite defaults later.
    set route_domain    0
    set do_mask         0
    set port            0

    # Set up flag-based actions.
    array set flags  {
        -route_domain { [set route_domain [iapp_pull $ptr args]] }
        -mask         { [set do_mask 1] }
        -length       { [set cidr_bits [iapp_pull $ptr args]] }
    }

    if { [llength [set non_switches [iapp_process_flags flags args]]] > 2 } {
        error "Too many arguments"
    }
    if { [llength $non_switches] == 2 } { set port [lindex $non_switches 1] }
    set addr [lindex $non_switches 0]


    # Detect a CIDR mask and pull it off the addr string
    if { [set loc [string first "/" $addr end-4]] != -1 } {
        set cidr_bits [string range $addr [expr {$loc + 1}] end]
        set addr [string range $addr 0 [expr {$loc - 1}]]
    }

    # Pull the route-domain off the addr string, but only use it as the
    # route domain if it wasn't overridden by -route_domain flag.
    if { [string first "%" $addr] != -1 } {
        if { $route_domain == 0 } {
            # route-domain is still default, so use value from addr string
            set route_domain [lindex [split $addr "%"] 1]
        }
        set addr [lindex [split $addr "%"] 0]
    }

    if { $do_mask } {

        # Define the delta between ipv4 and ipv6.
        # length: ipv4 mask is 32 bits, ipv6 is 128 bits.
        # group: ipv4 is grouped in octets, ipv6 as 16 bit words.
        # format: ipv4 is decimal notation, ipv6 is hex.
        # format1 also has the delimiter, format2 does not.
        array set v {
            0,length  32
            0,group   8
            0,format1 d.
            0,format2 d
            1,length  128
            1,group   16
            1,format1 .4x:
            1,format2 .4x
        }
        set is_ipv6 [string match "*:*:*" $addr]

        # Soften result of an illegal -length parameter.
        if { ![info exists cidr_bits] || $cidr_bits > $v($is_ipv6,length) } {
            set cidr_bits $v($is_ipv6,length)
        } elseif { $cidr_bits < 0 } {
            set cidr_bits 0
        }

        # Loop on the full length of the mask: 32 bits for ipv4, 128 for ipv6
        for { set octet 0; set i 0 } { $i < $v($is_ipv6,length) } { incr i } {

           # Take a break at intervals to save the grouping and add delimiter.
           # Interval is 8 bits for ipv4 and 16 bits for ipv6.
           if { $i && ![expr {$i % $v($is_ipv6,group)}] } {

               # Add the grouping and delimiter to the mask, then reset.
               append mask [format %$v($is_ipv6,format1) $octet]
               set octet 0
           }
           # Shift the prior bits left by multiplying by 2.
           # Then add the current bit, which is 1 if part of the mask, 0 if not.
           # Current bit is part of the mask if $i < number of bits in the mask.
           set octet [expr { 2 * $octet + ($i < $cidr_bits) }]
        }
        # Add the final grouping, then return the finished mask.
        set ret_val [format $mask%$v($is_ipv6,format2) $octet]

    } else {

        # calculate a destination
        # the route domain might be a name and we need a number.
        if { ![string is integer $route_domain] } {
            set route_domains [tmsh::get_config "/ net route-domain $route_domain"]
            if { [llength $route_domains] != 1 } {
                error "no such route domain: $route_domain"
            }
            # since we have already determined that the list is 1 long,
            # this explicit reference to element 0 is safe
            set route_domain [tmsh::get_field_value [lindex $route_domains 0] "id"]
        }

        set route_domain [expr { $route_domain == 0 ? "" : "%$route_domain" }]

        # 0 and * represent wildcard port assignments in the GUI,
        # but TMSH requires the string 'any' to specify a wildcard.
        if { $port == 0 || $port == "*" } {
            set port any
        }

        # Build the final destination. Use ":" for node names even if ipv6.
        set is_ipv6_literal [string match "*:*:*" $addr]
        set addr_delimiter  [expr { $is_ipv6_literal ? "." : ":" }]
        set ret_val ${addr}${route_domain}${addr_delimiter}${port}
    }
    return $ret_val
}

proc iapp_pool_members { args } {

    # Set defaults.
    array set fields {
        address          addr
        port             port
        port-secure      port_secure
        connection-limit connection_limit
        priority-group   priority
        ratio            ratio
    }
    set route_domain ""
    set port_override -1
    set aaa_domain 0
    set aaa_priority -1
    set app_service ""
    # Set up flag-related work.
    array set flags {
        -fields       { [array set fields  [iapp_pull $ptr args]] }
        -route_domain { [set route_domain  [iapp_pull $ptr args]] }
        -port         { [set port_override [iapp_pull $ptr args]] }
        -aaa_domain   { [set aaa_domain    1] }
        -aaa_pool     { [set aaa_priority  0] }
        -noapp        { [set app_service " app-service none"] }
    }
    iapp_process_flags flags args

    # Identify the non-address/non-port fields. These go inside braces in tmsh.
    set nonport_fields [lsearch -all -not -inline -regexp \
        [array names fields] {address|port|port-secure}]

    set members ""
    foreach row [join $args] {

        # Skip invalid table rows.
        if { [llength [join $row]] %2 == 1 } {
            continue
        }

        # Import APL table into an array for processing.
        array unset columns
        array set columns [join $row]
        set addr $columns($fields(address))

        # Identify the port number, either from table columns or by -port flag.
        if { $port_override != -1 } {
            set port $port_override
        } elseif { [info exists columns($fields(port))] } {
            set port $columns($fields(port))
        } elseif { [info exists columns($fields(port-secure))] } {
            set port $columns($fields(port-secure))
        } else {
            set port 80
        }

        # If specified, strip entered route domain and append the flag value.
        if { $route_domain != "" } {
            set addr [lindex [split $addr "%"] 0]
            set addr "$addr%$route_domain"
        }

        # If -aaa_domain, use domain controller format, otherwise use pool format
        if { $aaa_domain } {
            append members " $columns($fields(host)) \{ ip $addr $app_service \}"
        } else {
            append members " [iapp_destination $addr $port] \{"

            # Transfer non-port fields from the table to the tmsh string.
            foreach name $nonport_fields {
                if { [info exists columns($fields($name))] } {
                    append members " $name $columns($fields($name))"
                }
            }

            # If -aaa_pool, add priority field with incrementing value.
            # This is required by APM.
            if { $aaa_priority >= 0 } {
                append members " priority-group [incr aaa_priority]$app_service"
            }
            append members " \}"
        }
    }

    return "[expr { $aaa_domain ? "" : "members " }][expr { $members eq "" \
        ? "none" : "replace-all-with \{ $members \}" }]"
}

proc iapp_debug { args } {

    # Passwords should be obscured in all logs. Fields shown here are handled
    # in this proc, but the global variable may be overwritten if alternate
    # fields should be obscured.
    if { ![info exists ::SENSITIVES] } {
        set ::SENSITIVES {
            account-password
            admin-encrypted-password
            PASSWORD
            password
            passwd
            proxy-ca-passphrase
            secret
        }
    }

    # look for any of the sensitive words, and replace the word that follows it
    set regex "(\\m([join $::SENSITIVES |])\\M)\\s+\[^\\s\]*"
    regsub -all $regex [join $args] {\1 -OBSCURED-} args
    regsub -all "(<Password.*>).*(</Password>)" $args {\1-OBSCURED-\2} args

    set lev [tmsh::get_field_value [lindex [tmsh::get_config sys scriptd \
        log-level] 0] log-level]
    if { $lev eq {debug} } {
        puts $args
    }
}

# The apm_config proc provides a tmsh pre-processor for APM
# configuration, which in most cases will drastically reduce
# implementation code. To configure APM with this proc, pass
# it an array of object names and associated meta-tag substitutions.
# Each object must be categorized as a profile, a resource, or
# a policy-item. APM agents and customization-groups are derived
# from these 3 categories as needed.
#
# apm_config's return value is a list of the APM profiles defined
# in the argument and instantiated by the proc. This allows the
# procedure call to be embedded directly into a virtual server
# definition.
#
# These universal meta-tags may be placed anywhere in the array:
# <ITEM> The object name, eg. apm_access
# <PREFIX> The app name, including folder, eg. /Common/my_app.app/my_app
#
# Profile objects require the following meta-tags:
# <PROFILE_TYPE> The tmsh object type, eg. "apm profile access"
# <PROFILE_DEF>  The body of the object, eg.:
#     "access-policy <PREFIX>
#      defaults-from /Common/access
#      eps-group <PREFIX>_eps
#      errormap-group <PREFIX>_errormap
#      general-ui-group <PREFIX>_general_ui"
#
# apm_config will automatically create default customization-groups
# for the "-group" lines specified in access profile definitions.
# In the above example, there is no need to additionally specify a
# customization-group for errormap and general-ui.
#
# <PROFILE_TYPE> is a catch-all for other APM types, eg:
#      apm_sso {
#          <PROFILE_TYPE> {apm sso kerberos}
#          <PROFILE_DEF>  "account-name <USER>
#                          account-password <PASS>
#                          realm <REALM>" }
#
# In the example above, <PROFILE_TYPE> and <PROFILE_DEF> are
# apm_config meta-tags, while <USER>, <PASS>, and <REALM> must
# be substituted before calling apm_config, eg. if these tags are
# defined in $pre_proc_map, they may be substituted with:
# array set apm_map [string map [subst $pre_proc_map] [array get apm_map]]
#
# Resource objects require the following meta-tags:
# <RESOURCE_TYPE> The apm resource object type, eg. "webtop"
# <RESOURCE_DEF>  The body of the object, eg.:
#     "customization-group <ITEM>
#      minimize-to-tray false
#      webtop-type full"
#
# In the above example, a customization-group is specified. Any
# customization-group is assumed to be blank unless further defined by the
# <GROUP_DEF> meta-tag, eg. <GROUP_DEF> {type webtop}
#
# Policy-item objects are defined by the following meta-tags:
# <AGENT_TYPE>   default "resource-assign"
# <AGENT_DEF>    default "customization-group <ITEM>"
# <ITEM_AGENT>   default "agents { <ITEM>_ag { type <AGENT_TYPE> }}"
# <ITEM_CAPTION> default "<ITEM>"
# <ITEM_COLOR>   default "1"
# <ITEM_TYPE>    default "action"
# <ITEM_RULES>   defaults to a set of expressions/next-items where specified
# <RULE_CAPTION_0> default "fallback"
# <RULE_CAPTION_1> default "Successful"
# <RULE_CAPTION_2> default "successful"
#
# apm_config generates the APM agent and customization-group definitions
# as required for each policy-item, but specific objects may be defined
# by using the <AGENT_DEF> and <GROUP_DEF> meta-tags.
# To suppress the formation of an APM agent, specify <ITEM_AGENT> {}.

proc iapp_apm_config { args } {

    set app_service ""
    array set flags  {
        -noapp       { [set app_service "app-service none\n   "] }
    }
    iapp_process_flags flags args

    upvar [lindex $args 0] map_array

    # Pull $prefix from the array
    set prefix $map_array(prefix)
    unset map_array(prefix)

    # Stencils for creating apm objects
    set access_form \
       "<TMSH_CREATE> apm policy access-policy <ITEM> {\n   \
          $app_service    caption general\n   \
          start-item <ACCESS_START_ITEM>\n   \
          default-ending <ACCESS_ENDING>\n   \
          items replace-all-with {\n<ACCESS_ITEMS>    }\n}"

    set profile_form "<TMSH_CREATE> <PROFILE_TYPE> <ITEM> {\n   \
        $app_service    <PROFILE_DEF>\n}"

    set resource_form "<TMSH_CREATE> apm resource <RESOURCE_TYPE> <ITEM> {\n   \
        $app_service    <RESOURCE_DEF>\n}"

    set agent_form "<TMSH_CREATE> apm policy agent <AGENT_TYPE> <ITEM>_ag {\n   \
        $app_service    <AGENT_DEF>\n}"

    set group_form "<TMSH_CREATE> apm policy customization-group <ITEM> {\
        $app_service    <GROUP_DEF>}"

    set agent_group_form "<TMSH_CREATE> apm policy customization-group <ITEM>_ag {\
        $app_service    <GROUP_DEF>}"

    set policy_item_form "<TMSH_CREATE> apm policy policy-item <ITEM> {
    $app_service    <ITEM_AGENT>caption <ITEM_CAPTION>
    color <ITEM_COLOR>
    <ITEM_TYPE>
    <ITEM_RULES>\n}"

    # 1st round apm string map
    set default_map_1 {
        <ACCESS_ITEM> {}
        <AGENT_DEF> "customization-group <ITEM>_ag"
        <ITEM_AGENT> "agents replace-all-with {
        <ITEM>_ag { type <AGENT_TYPE> }}\n    "
        <ITEM_CAPTION> <ITEM>
        <ITEM_COLOR> {1}
        <ITEM_TYPE> "item-type action"
        <ITEM_RULES> "rules
        {[expr {[string first <RULE_NEXT_2> $map_array($item)] != -1 ? "{
            caption <RULE_CAPTION_2>
            expression <RULE_EXPR_2>
            next-item ${prefix}_<RULE_NEXT_2>
        }":""}][expr {[string first <RULE_NEXT_1> $map_array($item)] != -1 ? "{
            caption <RULE_CAPTION_1>
            expression <RULE_EXPR_1>
            next-item ${prefix}_<RULE_NEXT_1>
        }":""}]{
            caption <RULE_CAPTION_0>
            next-item ${prefix}_<RULE_NEXT_0>
        }}"
    }

    # 2nd round apm string map
    set default_map_2 {
        <ITEM> [expr { $item eq {default} ? "$prefix" : "${prefix}_$item" }]
        <PREFIX> $prefix
        <LOCAL_PATH> [string map {/ :} $prefix]
        <GROUP_DEF> ""
        <AGENT_TYPE> "resource-assign"
        <RULE_CAPTION_2> "successful"
        <RULE_CAPTION_1> "Successful"
        <RULE_CAPTION_0> "fallback"
    }

    # Build APM access profile and access-policy from the access_form.
    # Tags <ACCESS_ITEM> and <ACCESS_ENDING> are picked up from
    # $map_array items. <ITEM> and <GROUP_DEF> are picked up from
    # $default_map_2.
    foreach item [lsort [array names map_array]] {

        # Pick up the <ACCESS_ENDING> tag. There should be just 1.
        set access_form [string map $map_array($item) $access_form]

        # Filter out items that do not belong in the access-policy.
        # Anything with an ITEM_xxx tag belongs
        if { [string first <ITEM_ $map_array($item)] == -1 } {
            continue
        }

        # Add to the items list for the access-policy, e.g. priority
        append access_items "        ${prefix}_$item {<ACCESS_ITEM>}\n"
        set access_items [string map $map_array($item) $access_items]
        set access_items [string map [subst $default_map_1] $access_items]
    }

    # Build APM resources, policy-items, agents, and customization-groups from
    # the policy_item_form and resource_form.
    foreach item [lsort [array names map_array]] {

        # Each item starts as a profile, a resource, or a policy-item.
        # Profiles are free-form, so other apm objects can use the profile form.
        # In most cases, a policy-item spawns an agent.
        # Any definition specifying a customization-group will spawn that group.
        if { [string first "<PROFILE_DEF>" $map_array($item)] != -1 } {

            # Collect profile names for attachment to the virtual server
            if { [string first "apm profile " $map_array($item)] != -1 } {
                lappend profiles [expr { $item eq {default}
                                 ? "$prefix" : "${prefix}_$item" }]
                # When an access profile is found, built a policy of the same name
                if { [string first "apm profile access" $map_array($item)] != -1 } {
                    set def [string map "<ACCESS_ITEMS> {$access_items}" $access_form]
                    append cmds "[string map [subst $default_map_2] $def]\n"
                }
            }
            set def $profile_form
        } elseif { [string first "<RESOURCE_DEF>" $map_array($item)] != -1 } {
            set def $resource_form
        } else {
            set def $policy_item_form
            if { [string first "<ITEM_AGENT> {}" $map_array($item)] == -1 } {
                append def $agent_form
            }
        }

        # Apply 1st pass of string maps
        set def [string map $map_array($item) $def]
        set def [string map [subst $default_map_1] $def]

        # If a customization-group is specified, add its definition
        if { [string first "customization-group" $def] != -1 } {
            if { [string first "apm policy agent" $def] != -1 } {
                append def $agent_group_form
            } elseif { [string first "apm profile access" $def] == -1 } {
                append def $group_form
            }
        }

        # Apply 2nd pass of string maps
        set def [string map $map_array($item) $def]
        append cmds [string map [subst $default_map_2] $def]
    }

    # Divide and execute tmsh commands
    set tag "<TMSH_CREATE>"
    set tag_length [string length $tag]
    set last [expr { [string first $tag $cmds] + $tag_length }]
    while { [set pos [string first $tag $cmds $last]] != -1 } {
        incr pos -1
        iapp_conf create [string range $cmds $last $pos]
        set last [expr { $pos + $tag_length + 1 }]
    }
    iapp_conf create [string range $cmds $last end]
    return $profiles
}

proc iapp_upgrade_template { upgrade_var upgrade_trans } {
    upvar $upgrade_var   upgrade_var_arr
    upvar $upgrade_trans upgrade_trans_arr

    # create the new variables from the old
    foreach { var } [array names upgrade_var_arr] {

        # substitute old variable name for abbreviation "##"
        regsub -all {##} $upgrade_var_arr($var) \$$var map_cmd

        # run the mapping command from inside the array
        if { [catch { subst $map_cmd } err] } {
            if { [string first "no such variable" $err] == -1 } {
                puts "ERROR $err"
            }
        }
    }

    # move variables over and apply translations
    set var_mods ""
    set var_adds ""
    foreach var [array names vx] {

        # if the APL variable name is in the translation array,
        # then use the custom translation built for that variable.
        if { [info exists upgrade_trans_arr($var)] } {
            array set sub_arr [subst $upgrade_trans_arr($var)]
            if { [info exists sub_arr($vx($var))] } {
                set vx($var) $sub_arr($vx($var))
            }
            array unset sub_arr
        # else, if the APL variable value is in the translation array,
        # then use the generic translation of that value.
        } elseif { [info exists upgrade_trans_arr($vx($var))] } {
            set vx($var) [subst $upgrade_trans_arr($vx($var))]
        }

        # add to tmsh command string
        if { [info exists ::$var] } {
            append var_mods "\n $var \{ value \"$vx($var)\" \} "
        } else {
            append var_adds "\n $var \{ value \"$vx($var)\" \} "
        }
    }

    # move tables over
    set tbl_mods ""
    set tbl_adds ""
    foreach tbl [array names tx] {

        # convert table from APL format to TMSH format
        if { ![llength $tx($tbl)] } {
            set tbl_def "column-names none"
        } else {
            set rows_def ""
            foreach apl_row $tx($tbl) {
                array set row_arr [join $apl_row]
                append rows_def "\n  \{ row \{ "
                foreach apl_col [array names row_arr] {
                    append rows_def "$row_arr($apl_col) "
                }
                append rows_def "\}\}"
            }
            set tbl_def \
            "\n  column-names \{ [array names row_arr] \} rows \{ $rows_def \}"
            array unset row_arr
        }

        # add to tmsh command string
        if { [info exists ::$tbl] } {
            append tbl_mods "\n $tbl \{ $tbl_def \} "
        } else {
            append tbl_adds "\n $tbl \{ $tbl_def \} "
        }
    }

    # construct the "tmsh modify" command
    set cmd "sys application service $tmsh::app_name "
    if { [llength $var_mods] } {
        append cmd "\nvariables modify { $var_mods }"
    }
    if { [llength $var_adds] } {
        append cmd "\nvariables add { $var_adds }"
    }
    if { [llength $tbl_mods] } {
        append cmd "\ntables modify { $tbl_mods }"
    }
    if { [llength $tbl_adds] } {
        append cmd "\ntables add { $tbl_adds }"
    }

    # Execute with debug output. This conversion takes place within the
    # existing ASO, so tmsh modify is used instead of tmsh create.
    iapp_debug "TEMPLATE UPGRADE"
    iapp_conf modify $cmd
    return
}

proc iapp_downgrade_template { pivot_var upgrade_var downgrade_table } {
    upvar $downgrade_table downgrade_tbl_arr

    # The ASO variable "offload_history" is used to recover the legacy
    # choice a user made about SSL offload. It should be present in all cases.
    # This conditional only handles the case where a user has deliberately
    # deleted it by manipulating the ASO directly from tmsh.
    if { ![info exists ::offload_history] } {
        set ::offload_history "No"
    }

    # BIG-IP erases table contents when the APL optional hides the table.
    # Since the prior data is not available, this downgrade must back-convert
    # existing table data. Unlike tables, variables remain intact from the
    # legacy ASO.
    set tbl_def ""
    foreach tbl [array names downgrade_tbl_arr] {
        # Check for existence of each table in the current context.
        # If not, skip to next.
        if { ![info exists [set tbl]] } {
            continue
        }
        # Check for existence of each table in the legacy context.
        # If not, add an empty table so "tmsh tables modify" does not fail.
        if { ![info exists ::$downgrade_tbl_arr($tbl)] } {
            iapp_conf modify sys app ser $tmsh::app_name tables add \{ $downgrade_tbl_arr($tbl) \}
        }
        append tbl_def "$downgrade_tbl_arr($tbl) \{ "
        if { [llength [subst $$tbl]] } {
            set rows_def ""
            foreach apl_row [subst $$tbl] {
                array set row_arr [join $apl_row]
                append rows_def "\n  \{ row \{ "
                foreach apl_col [array names row_arr] {
                    append rows_def "$row_arr($apl_col) "
                }
                append rows_def "\}\}"
            }
            append tbl_def \
            "column-names \{ [array names row_arr] \} rows \{ $rows_def \}"
            array unset row_arr
        } else {
            append tbl_def "rows none"
        }
        append tbl_def " \} "
    }
    regsub -all "\n" $tbl_def {} tbl_def
    set cmd "sys app ser $tmsh::app_name \
        variables modify \{ \
            $pivot_var \{ value $::offload_history \} \
            $upgrade_var \{ value No \} \
        \} \
        tables modify \{ $tbl_def \}"
    iapp_debug "TEMPLATE DOWNGRADE"
    iapp_conf modify $cmd
    return
}

proc iapp_get_ca_certs { args } {
    # Procedure formats and returns ca-bundle 509 certificates from ca-bundle.bak
    # (copy of tmos supplied ca-bundle.crt)
    # Returns backup files when using -files flag
    # Returns specified restore file certificates when using -restore -return flags
    # Returns specified restore file table certificates when using -restore -tablename
    # Returns selected certificates
    #
    # Set defaults. Flag actions may overwrite defaults later.
    set rest_files         0
    set do_restore         0
    set restore_return     0
    set restore_table_name 0
    set do_certs 0
    set user_get [iapp_get_user]
    set username [string range $user_get [expr {[string last user $user_get] +5 }] end-3 ]
    # Set up flag-based actions.
    array set flags  {
        -files     { [set rest_files 1] }
        -return    { [set do_restore 1] [set restore_return 1] }
        -tablename { [set do_restore 1] [set restore_table_name 1] }
        -certs     { [set do_certs 1] }
    }
    iapp_process_flags flags args
    set fn_ca_bundle "[lindex $args 0]"
    set cert_choices "[lindex $args 1]"
    set duplicate " "
    if { $rest_files eq 0 || $do_restore } {
        set fh_ca_bundle [open $fn_ca_bundle r]
        set ca_bundle_data [read $fh_ca_bundle]
        close $fh_ca_bundle
        set ca_bundle_split [split [string map "{-----END CERTIFICATE-----} \001" $ca_bundle_data] "\001"]
        set final ""
        # Grab Subject Name and Serial number from each certificate
        foreach subject $ca_bundle_split {
            if {$subject eq {}} {
                continue
            }
            set a [string first Subject: $subject]
            set b [string first \n $subject $a]
            set ab [string range $subject $a $b]
            set c [expr {[string first O= $ab] +2}]
            if { $c < 2 }{
                set c [expr {[string first CN= $ab] +2}]
            }
            set d [expr {[string first , $ab $c] -1}]
            # Deal with case were comma is not present after subject name
            if { $d < 0 }{
                set dc [string range $ab $c end-1]
            # Deal with case were text is not able to be located using common name, just grab the first 30 characters
            } elseif { $d > 2000 }{
                set dc [string range $ab $c 47]
            } else {
                set dc [string range $ab $c $d]
            }
            set f [expr {[string first Number: $subject] +7}]
            set g [expr {[string first Signature $subject $f] -1}]
            set fg [string range $subject $f $g]
            # Remove spaces and new line characters from serial number
            set fg_nospace [string map {" " "" "\n" "" ":" ""} $fg]
            set first_5 [string map {"(" ""} [string range $fg_nospace 0 4]]
            # -cert flag returns list of selected root certificates
            if { $do_certs }{
                foreach selection $cert_choices {
                    if { $first_5 eq $selection }{
                        # setup to remove duplicate root certificates - tmos supplied ca-bundle can have duplicates
                        set i 0
                        set duplicate_split [split [string map "{ } \001" $duplicate] "\001"]
                        foreach dup $duplicate_split {
                            if { $dup eq $first_5 }{
                                incr i
                            }
                        }
                        # add certificate if not a duplicate
                        if { $i < 1 }{
                            append final "${subject}-----END CERTIFICATE-----\n"
                            puts [tmsh::log notice "User:'${username}' Modified CA-Bundle, adding the following Root CA:(SN) ${fg_nospace} Name:${dc}"]
                            append duplicate "$first_5 "
                        }
                    }
                }
            } elseif { $dc !="" || $fg_nospace !="" || $restore_table_name eq 1 }{
                if { $restore_return eq 0 && $restore_table_name eq 0 }{
                    append final "${dc},SN:${fg_nospace}\t${first_5}\n"
                } elseif { $restore_table_name eq 1 }{
                    set table_cert [string first ### $subject]
                    if { $table_cert > -1 && $table_cert < 500 } {
                        set ending "$subject-----END CERTIFICATE-----"
                        set table_certificate [string range $ending [string first -----BEGIN $ending] [ expr { [string first -----END $ending] +24 }]]
                        append final  "{ row { \"[string map {"\n" " "} $table_certificate]\" \"[string range $subject 4 [expr { [string first \n $subject 1] -1 }]]\" } }"
                    }

                } else {
                    set table_cert [string first ### $subject]
                    if { $table_cert < 0 || $table_cert > 500 } {
                        append final "${first_5} "
                    }
                }
            }
        }
        if { $do_restore && $restore_table_name eq 0 }{
            set final [string map {"(" ""} $final]
        }
        return $final
    }
    if { $rest_files }{
        # Pull TMOS ca-bundle file into list
        catch { set fn_bak_ca_bundle [exec ls -t /config/ssl/ssl.crt/] } err
        if { $::errorCode != "" } {
            puts "Error during file lookup in ssl certificate directory: ${err}"
            error "Error during file lookup in ssl certificate directory: ${err}"
        }
        foreach bak [join "$fn_bak_ca_bundle"] {
            set full_path "/config/ssl/ssl.crt/$bak"
            if { [iapp_is full_path $fn_ca_bundle] }{
                set fn_bak_exists 1
                break
            } else {
                set fn_bak_exists 0
            }
        }
        if { $fn_bak_exists }{
            puts "Backup of factory TMOS ca-bundle /config/ssl/ssl.crt/ca-bundle.crt, at:${fn_ca_bundle}, already exists. No need to backup"
        } elseif { $fn_bak_exists eq 0 }{
            puts "Backing up factory TMOS ca-bundle /config/ssl/ssl.crt/ca-bundle.crt, to ${fn_ca_bundle}."
            catch { exec cp /config/ssl/ssl.crt/ca-bundle.crt ${fn_ca_bundle} } err
            if { $::errorCode != "" } {
                puts "Error creating backup file:${fn_ca_bundle}: ${err}"
                error "Error creating backup file:${fn_ca_bundle}: ${err}"
            }
        }
        set restore_list [lsearch -all -inline $fn_bak_ca_bundle *_bak*]
        set restore_final ""
        foreach res $restore_list {
            append restore_final "${res}\t${res}\n"
        }
        if { $restore_final == "" }{
            return "No restore files found"
        } else {
            return $restore_final
        }
    }
}
}

sys application template f5.vmware_view.v1.5.1 {
    actions {
        definition {
            html-help {
                
        <p><b>VMware Horizon View iApp template</b></p>
        <p>This template creates a complete configuration optimized for managing traffic associated with implementations of Horizon View 5.2 and 5.3, 6.0, and 6.1.</p>
        <p> Before you start:</p>
        <ul>
        <li>There are required changes to the View configuration.  For instructions, and complete guidance on using this iApp, see http://www.f5.com/pdf/deployment-guides/vmware-view5-iapp-dg.pdf</li>
        <li>All of the help for this iApp template is found inline. Select <b>Yes, show inline help</b> from the inline help question.</li>
        <li>If using APM, you must have NTP and DNS configured on the BIG-IP system. See the deployment guide for instructions.</li>
        <li>Set up VLANs to the servers containing the applications your clients will access.</li>
        <li>Import SSL certificates to authenticate the server and encrypt data.</li>
        </ul>
    
            }
            implementation {
                tmsh::include f5.iapp.1.5.1.cli
                iapp_template start
                
                array set pcoip_proxy_apm_map {
                    default {
                        <PROFILE_TYPE> {apm profile access}
                        <GROUP_DEF> {type logout }
                        <PROFILE_DEF> "accept-languages replace-all-with \
                        { en ja zh-cn zh-tw ko es fr de }\n   \
                        access-policy <PREFIX>\n   \
                        defaults-from /Common/access\n   \
                        customization-group <PREFIX>_logout\n   \
                        eps-group <PREFIX>_eps\n   \
                        errormap-group <PREFIX>_errormap\n   \
                        framework-installation-group <PREFIX>_frameworkinstallation\n   \
                        general-ui-group <PREFIX>_general_ui\n   \
                        <LOG_SETTINGS>"
                    }
                    connect {
                        <PROFILE_TYPE> {apm profile connectivity}
                        <GROUP_DEF> {type secure-access-client }
                        <PROFILE_DEF> "customization-group <ITEM>\n   \
                        defaults-from /Common/connectivity
                        client-policy replace-all-with { <PREFIX>_clientPolicy }
                        compression enabled
                        adaptive-compression enabled
                        compress-buffer-size 4096
                        compress-cpu-saver true
                        compress-cpu-saver-high 90
                        compress-cpu-saver-low 75
                        compress-gzip-level 6
                        compress-gzip-memlevel 8192
                        compress-gzip-window-size 16384
                        compress-ingress false
                        compress-preferred-method zlib
                        compression-codecs replace-all-with { deflate lzo bzip2 }
                        deflate-compression-level 1
                        fec-name none
                        location-specific false"
                    }
                    ent_in {
                        <ITEM_AGENT> {}
                        <ITEM_CAPTION> {"Start"}
                        <ITEM_TYPE> {}
                        <RULE_NEXT_0> act_client_type
                    }
                    act_client_type {
                        <ITEM_AGENT> {}
                        <ITEM_CAPTION> {"Client Type"}
                        <RULE_CAPTION_2> {"VMware View"}
                        <RULE_EXPR_2> {"expr {[mcget {session.client.type}] == \"view-xml\" || [mcget {session.client.type}] == \"view-ssig\" }"}
                        <RULE_NEXT_2> <CLIENT_TYPE_NEXT_2>
                        <RULE_CAPTION_1> {"Full or Mobile Browser"}
                        <RULE_EXPR_1> {"expr {[mcget {session.ui.mode}] == 0 || [mcget {session.ui.mode}] == 9 || [mcget {session.ui.mode}] == 6 }"}
                        <RULE_NEXT_1> <CLIENT_TYPE_NEXT_1>
                        <RULE_NEXT_0> end_deny
                    }
                    act_vmware_logon_page {
                        <AGENT_TYPE> logon-page
                        <AGENT_DEF> "customization-group <ITEM>_ag\n    \
                        vmware-view-logon-screen disclaimer\n    \
                        type vmware-view"
                        <GROUP_DEF> "local-path <XML_VMWARE>"
                        <ITEM_CAPTION> {"View Client Disclaimer"}
                        <RULE_NEXT_0> <VMWARE_LOGON_NEXT>
                    }
                    act_vmware_logon_page_1 {
                        <AGENT_TYPE> logon-page
                        <AGENT_DEF> "customization-group <ITEM>_ag\n    \
                        vmware-view-auth-label <AUTH_LABEL>\n                \
                        vmware-view-logon-screen <TWO_FACTOR_TYPE>\n    \
                        type vmware-view"
                        <ITEM_CAPTION> {"<TWO_FACTOR_CAPTION> View Client Logon"}
                        <RULE_NEXT_0> <TWO_FACTOR_NEXT>
                    }
                    act_vmware_logon_page_2 {
                        <AGENT_TYPE> logon-page
                        <AGENT_DEF> "customization-group <ITEM>_ag\n    \
                        vmware-view-domains \"<NETBIOS_NAME>\"\n    \
                        type vmware-view"
                        <ITEM_CAPTION> {"AD View Client Logon"}
                        <RULE_NEXT_0> <USB_REDIRECT>
                    }
                    act_vmware_logon_page_3 {
                        <AGENT_TYPE> logon-page
                        <AGENT_DEF> "customization-group <ITEM>_ag\n    \
                        vmware-view-logon-screen cert-auth\n    \
                        type vmware-view"
                        <ITEM_CAPTION> {"Smart Card View Client Logon"}
                        <RULE_NEXT_0> client_cert_inspection
                    }
                    act_logon_page {
                        <AGENT_TYPE> logon-page
                        <AGENT_DEF> "customization-group <ITEM>_ag\n   \
                        field-type3 password\n  \
                        post-var-name2 password1\n \
                        post-var-name3 password\n \
                        sess-var-name2 password1\n \
                        sess-var-name3 password\n \
                        <MULTI_LOGON>"
                        <GROUP_DEF> "local-path <XML_LOGON>"
                        <ITEM_CAPTION> {"<TWO_FACTOR_CAPTION> Browser Logon Page"}
                        <RULE_NEXT_0> <TWO_FACTOR_HTML_NEXT>
                    }
                    act_logon_page_1 {
                        <AGENT_TYPE> logon-page
                        <AGENT_DEF> "customization-group <ITEM>_ag\n   \
                        <MULTI_LOGON>"
                        <GROUP_DEF> "local-path <XML_LOGON>"
                        <ITEM_CAPTION> {"Browser Logon Page"}
                        <RULE_NEXT_0> <ACT_VARIABLE_ASSIGN_2>
                    }
                    act_vmware_view_policy {
                        <AGENT_TYPE> variable-assign
                        <AGENT_DEF> "type vmware-view-policy \n \
                        variables {{ expression \"expr {1}\"\n    \
                        varname session.vmware_view.usb_enabled }}"
                        <ITEM_CAPTION> {"VMware View Policy"}
                        <RULE_NEXT_0> <AUTH_NEXT_SMART>
                    }
                    act_vmware_view_policy_1 {
                        <AGENT_TYPE> variable-assign
                        <AGENT_DEF> "type vmware-view-policy \n \
                        variables {{ expression \"expr {1}\"\n    \
                        varname session.vmware_view.usb_enabled }}"
                        <ITEM_CAPTION> {"Browser VMware View Policy"}
                        <RULE_NEXT_0> <AUTH_NEXT_SMART_1>
                    }
                    act_message_box {
                        <AGENT_TYPE> message-box
                        <AGENT_DEF> "customization-group <ITEM>_ag"
                        <GROUP_DEF> "local-path <XML_MESSAGE>\n    \
                        type message-box"
                        <ITEM_CAPTION> {"View Browser Disclaimer"}
                        <RULE_NEXT_0> <MESSAGE_BOX_NEXT>
                    }
                    act_securid {
                        <AGENT_TYPE> aaa-securid
                        <AGENT_DEF> "server <SECURID_DROP>"
                        <ITEM_CAPTION> {"RSA SecurID Auth"}
                        <RULE_EXPR_1> {"expr {[mcget {session.securid.last.result}] == 1}"}
                        <RULE_NEXT_1> act_vmware_logon_page_2
                        <RULE_NEXT_0> end_deny
                    }
                    act_securid_1 {
                        <AGENT_TYPE> aaa-securid
                        <AGENT_DEF> "server <SECURID_DROP>"
                        <ITEM_CAPTION> {"RSA SecurID Browser Auth"}
                        <RULE_EXPR_1> {"expr {[mcget {session.securid.last.result}] == 1}"}
                        <RULE_NEXT_1> act_variable_assign_1
                        <RULE_NEXT_0> end_deny
                    }
                    act_radius {
                        <AGENT_TYPE> aaa-radius
                        <AGENT_DEF> "<RADIUS_AAA_PROFILE>"
                        <ITEM_CAPTION> {"RADIUS Auth"}
                        <RULE_EXPR_1> {"expr {[mcget {session.radius.last.result}] == 1}"}
                        <RULE_NEXT_1> act_vmware_logon_page_2
                        <RULE_NEXT_0> end_deny
                    }
                    act_radius_1 {
                        <AGENT_TYPE> aaa-radius
                        <AGENT_DEF> "<RADIUS_AAA_PROFILE>"
                        <ITEM_CAPTION> {"RADIUS Browser Auth"}
                        <RULE_EXPR_1> {"expr {[mcget {session.radius.last.result}] == 1}"}
                        <RULE_NEXT_1> act_variable_assign_1
                        <RULE_NEXT_0> end_deny
                    }
                    act_variable_assign {
                        <AGENT_TYPE> variable-assign
                        <AGENT_DEF> "variables {{ expression \"expr {\\\"<NAT_PROXY_IP>\\\"}\"\n    \
                        varname view.proxy_addr }}"
                        <ITEM_CAPTION> {"NAT Variable Assign"}
                        <RULE_NEXT_0> act_full_resource_assign
                    }
                    act_variable_assign_1 {
                        <AGENT_TYPE> variable-assign
                        <AGENT_DEF> "variables {{ expression \"expr {[mcget {session.logon.last.password1}]}\"\n    \
                        varname session.logon.last.password }}"
                        <ITEM_CAPTION> {"Password Variable Assign"}
                        <RULE_NEXT_0> <ACT_VARIABLE_ASSIGN_2>
                    }
                    act_variable_assign_2 {
                        <AGENT_TYPE> variable-assign
                        <AGENT_DEF> "variables {{ expression \"expr {\\\"<NETBIOS_NAME>\\\"}\"\n    \
                        varname session.logon.last.domain }}"
                        <ITEM_CAPTION> {"Domain Variable Assign"}
                        <RULE_NEXT_0> <USB_REDIRECT_BROWSER>
                    }
                    act_variable_assign_3 {
                        <AGENT_TYPE> variable-assign
                        <AGENT_DEF> "variables {{ expression \"expr {\\\"<NAT_PROXY_IP>\\\"}\"\n    \
                        varname view.proxy_addr }}"
                        <ITEM_CAPTION> {"Browser NAT Variable Assign"}
                        <RULE_NEXT_0> act_full_resource_assign_1
                    }
                    act_variable_assign_4 {
                        <AGENT_TYPE> variable-assign
                        <AGENT_DEF> {variables {{ expression "foreach x [split [mcget {session.ssl.cert.x509extension}] \"\\n\"] { if { [string first \"othername:UPN\" $x] >= 0 } { return [string range $x [expr { [string first \"<\" $x] + 1 }] [expr { [string first \">\" $x] - 1 }]]; } }; return \"\";"    \
                        varname session.custom.certupn }}}
                        <ITEM_CAPTION> {"CERT UPN Extraction"}
                        <RULE_NEXT_0> <AUTH_NEXT>
                    }
                    act_variable_assign_5 {
                        <AGENT_TYPE> variable-assign
                        <AGENT_DEF> {variables {{ expression "foreach x [split [mcget {session.ssl.cert.x509extension}] \"\\n\"] { if { [string first \"othername:UPN\" $x] >= 0 } { return [string range $x [expr { [string first \"<\" $x] + 1 }] [expr { [string first \">\" $x] - 1 }]]; } }; return \"\";"    \
                        varname session.custom.certupn }}}
                        <ITEM_CAPTION> {"CERT UPN Extraction"}
                        <RULE_NEXT_0> <AUTH_1_NEXT>
                    }
                    act_active_directory_auth {
                        <AGENT_TYPE> aaa-active-directory
                        <AGENT_DEF> "<AAA_SERVER>\n    type auth"
                        <ITEM_CAPTION> {"View Client AD Auth"}
                        <RULE_EXPR_1> {"expr {[mcget {session.ad.last.authresult}] == 1}"}
                        <RULE_NEXT_1> <AUTH_NEXT>
                        <RULE_NEXT_0> end_deny
                    }
                    act_active_directory_auth_1 {
                        <AGENT_TYPE> aaa-active-directory
                        <AGENT_DEF> "<AAA_SERVER>\n    type auth"
                        <ITEM_CAPTION> {"Browser AD Auth"}
                        <RULE_EXPR_1> {"expr {[mcget {session.ad.last.authresult}] == 1}"}
                        <RULE_NEXT_1> <AUTH_1_NEXT>
                        <RULE_NEXT_0> end_deny
                    }
                    client_cert_inspection {
                        <ITEM_AGENT> {}
                        <ITEM_CAPTION> {"View Client Cert Inspection"}
                        <RULE_EXPR_1> {"expr {[mcget {session.ssl.cert.valid}] == \"0\"}"}
                        <RULE_NEXT_1> <USB_REDIRECT>
                        <RULE_NEXT_0> end_deny
                    }
                    client_cert_inspection_1 {
                        <ITEM_AGENT> {}
                        <ITEM_CAPTION> {"Browser Cert Inspection"}
                        <RULE_EXPR_1> {"expr {[mcget {session.ssl.cert.valid}] == \"0\"}"}
                        <RULE_NEXT_1> <USB_REDIRECT_1>
                        <RULE_NEXT_0> end_deny
                    }
                    act_full_resource_assign {
                        <AGENT_DEF> "rules {{\n   \
                        remote-desktop-resources replace-all-with {\n       \
                        <PREFIX>_remote_desktop }\n   \
                        webtop <PREFIX>_webtop }}"
                        <ITEM_CAPTION> {"View Client Resource Assign"}
                        <RULE_NEXT_0> end_allow
                    }
                    act_full_resource_assign_1 {
                        <AGENT_DEF> "rules {{\n   \
                        remote-desktop-resources replace-all-with {\n       \
                        <PREFIX>_remote_desktop }\n   \
                        webtop <PREFIX>_webtop }}"
                        <ITEM_CAPTION> {"Browser Resource Assign"}
                        <RULE_NEXT_0> end_allow
                    }
                    end_allow {
                        <AGENT_DEF> {}
                        <AGENT_TYPE> ending-allow
                        <ITEM_CAPTION> {"Allow"}
                        <ITEM_TYPE> {item-type ending}
                        <ITEM_RULES> {}
                    }
                    end_deny {
                        <ACCESS_START_ITEM> <PREFIX>_ent_in
                        <ACCESS_ENDING> <PREFIX>_end_deny
                        <AGENT_TYPE> ending-deny
                        <GROUP_DEF> {type logout }
                        <ITEM_CAPTION> {"Deny"}
                        <ITEM_TYPE> {item-type ending}
                        <ITEM_COLOR> {2}
                        <ITEM_RULES> {}
                    }
                    webtop {
                        <RESOURCE_TYPE> webtop
                        <RESOURCE_DEF> "webtop-type full"
                    }
                    remote_desktop {
                        <RESOURCE_TYPE> "remote-desktop vmware-view"
                        <RESOURCE_DEF> "auto-logon enabled\n<HTTP_POOL>\n<SERVER_SSL>\n<SMART_BROKER>"
                    }
                }
                proc xml_file { obj_name obj_type } {
                    tmsh::include f5.iapp.1.5.1.cli
                    set xml {<?xml version="1.0" encoding="utf-8"?>
                        <customization_group name="default_<TYPE>" type="<TYPE>">
                        <item language="en">
                        <LINKS>
                        <image00>/public/images/my/tr.gif</image00>
                        <image01>/public/images/my/tr.gif</image01>
                        <image02>/public/images/my/tr.gif</image02>
                        <image03>/public/images/my/tr.gif</image03>
                        <image04>/public/images/my/tr.gif</image04>
                        <image05>/public/images/my/tr.gif</image05>
                        <image06>/public/images/my/tr.gif</image06>
                        <image07>/public/images/my/tr.gif</image07>
                        <image08>/public/images/my/tr.gif</image08>
                        <image09>/public/images/my/tr.gif</image09>
                        </item>
                        </customization_group>
                    }

                    array set xml_map {
                        logon-page {
                            <TYPE> "0" <LINKS>
                            "<form_header>Secure Logon &lt;br&gt; for F5 Networks</form_header>
                            <logon_field_1>Username</logon_field_1>
                            <logon_field_2>Password</logon_field_2>
                            <logon_field_3>[iapp_substa ::two_factor_field3($::securid,$::radius,$::html5)]</logon_field_3>
                            <logon_field_4>[expr { $::html5 && $::create_new_multiple_profile \
                            ? "Domain" : "Field 4" }]</logon_field_4>
                            <logon_field_5>Field 5</logon_field_5>
                            <logon>Logon</logon>
                            <front_image>/public/images/my/tr.gif</front_image>
                            <save_password>Save Password</save_password>
                            <new_password>New Password</new_password>
                            <verify_password>Verify Password</verify_password>
                            <wrong_match>Password and confirmation do not match.</wrong_match>
                            <dont_change_password>Do not change password</dont_change_password>
                            <http_401_response>Authentication required to access the resources.</http_401_response>
                            <vmware_view_message>[expr { $::disclaimer \
                            ? "$::apm__disclaimer_text" : "" }]</vmware_view_message>"
                        }
                        message-box {
                            <TYPE> "4" <LINKS>
                            "<form_message>[expr { $::do_apm && $::disclaimer \
                            ? $::apm__disclaimer_text : "" }]</form_message>
                            <link>Click here to continue</link>"
                        }
                        * {
                            <TYPE> "2" <LINKS>
                            "<form_message>It has been detected that View Client has not been installed on your host. Please choose one of the following two options below.</form_message>
                            <image1>/public/images/sq-positive.gif</image1>
                            <link1>Download Client</link1>
                            <image2>/public/images/sq-negative.gif</image2>
                            <link2>End Session</link2>"
                        }
                    }
                    set partition [lindex [split [tmsh::pwd] /] 1]
                    set location "/config/filestore/files_d/${partition}_d/customization_group_d"
                    set filepath "$location/:${partition}:${tmsh::app_name}.app:${tmsh::app_name}_${obj_name}"
                    file mkdir $location
                    set fh [open $filepath w]
                    puts $fh [string map [iapp_substa xml_map($obj_type)] $xml]
                    close $fh
                    return $filepath
                }

                # constants
                set YES_ANSWER "yes"
                set ENABLED_ON_ANSWER "enabled_on"
                set DISABLED_ON_ANSWER "disabled_on"
                set DO_NOT_USE_ANSWER "/#do_not_use#"
                set CREATE_NEW_ANSWER "/#create_new#"
                set CREATE_ADVANCED_ANSWER "/#create_advanced#"
                set DEFAULT_ANSWER "/#default#"
                set SSL_ANSWER "ssl"
                set SSL_BRIDGING_ANSWER "client_ssl_server_ssl"
                set app $tmsh::app_name
                set advanced [iapp_is ::options__advanced_mode $::YES_ANSWER]
                set create_new_aaa_profile [iapp_is ::apm__aaa_profile $::CREATE_NEW_ANSWER]
                set create_new_radius_profile [iapp_is ::apm__radius_aaa_profile $::CREATE_NEW_ANSWER]
                set create_new_multiple_profile [expr {[iapp_is ::apm__multiple_domain "yes"] && $advanced}]
                
        set do_apm          [expr { [iapp_get_provisioned apm] && [iapp_is ::apm__use_apm yes] }]
        set html5           [expr { $do_apm && [iapp_is ::apm__use_html5 yes] }]
        set usb_redirect [expr { $do_apm && [iapp_is ::apm__use_usb_redirection yes] }]
        set do_smart     [expr { $do_apm && [iapp_is ::apm__use_smartcard yes] }]
        set disclaimer      [expr { $do_apm && [iapp_is ::apm__use_disclaimer yes] }]
        set securid         [expr { $do_apm && [iapp_is ::apm__use_securid yes] }]
        set radius       [expr { $do_apm && [iapp_is ::apm__use_securid radius] }]
        if { [expr { $radius && [iapp_is ::apm__radius_aaa_profile $::CREATE_NEW_ANSWER] }] } {
            set radius_ipv6_nas [string match "*:*:*" $::apm__radius_nas_ip]
        }
        set two_factor  [expr { $securid || $radius }]
        set no_client_cert_ca     [expr { $do_smart && [iapp_is ::ssl__client_cert_ca /#do_not_use#] }]
    
                set is_v11_4  [iapp_tmos_version >= 11.4]
                set is_v11_5  [iapp_tmos_version >= 11.5]
                set is_v11_6  [iapp_tmos_version >= 11.6]
                set is_v12_0  [iapp_tmos_version >= 12.0]
                set is_v12_1  [iapp_tmos_version >= 12.1]
                set lb_lcm_licensed [expr {[string first ltm_lb_least_conn  [tmsh::show sys license detail]] != -1}]
                set allow_afm [expr { $is_v11_4 && [iapp_get_provisioned afm]}]
                set bash_disabled [expr {[string first true [tmsh::list sys db systemauth.disablebash value]] != -1}]

                # VLANS
                set is_vlans_enabled_on [iapp_is ::pcoip__vlan_listening $::ENABLED_ON_ANSWER]
                set is_vlans_disabled_on [iapp_is ::pcoip__vlan_listening $::DISABLED_ON_ANSWER]
                set empty_vlans [iapp_is ::pcoip__vlan_selections ""]

                # array keys: $is_vlans_enabled_on,$is_vlans_disabled_on,$empty_vlans
                array set vlans {
                    1,0,0 { vlans-enabled vlans replace-all-with \{ $::pcoip__vlan_selections \} }
                    1,0,1 { vlans-enabled vlans none }
                    0,1,0 { vlans-disabled vlans replace-all-with \{ $::pcoip__vlan_selections \} }
                    *     { vlans-disabled vlans none }
                }

                # Utilities
                proc create_eav_script { script_name } {
                    set eav_script_name /config/monitors/${::app}_$script_name
                    set map "<SCRIPT1> $::script_1 <SCRIPT2> $::script_2 <SCRIPT3> $::script_3 <SCRIPT4> $::script_4 <SCRIPT5> $::script_5 <SCRIPT6> $::script_6"
                    set fn [open "$eav_script_name" "w" "0755"]
                    # This string map pulls the static bash script out of the forms array
                    puts $fn [string map $map $::eav($script_name)]
                    close $fn
                    return $eav_script_name
                }

                # FIREWALL (AFM) POLICY
                # beware: syntactically correct AFM commands fail when AFM is not provisioned
                # extra info exists test benefits BIG-IQ apps that bypass presentation
                set do_firewall [expr { $allow_afm && [info exists ::afm__policy] && ![iapp_is ::afm__policy "/#do_not_use#"] }]
                set new_firewall [iapp_is ::afm__policy "/#default#"]
                set allow_by_reputation [iapp_is ::afm__restrict_by_reputation "accept"]
                if { $allow_afm } {
                    set staging_policy [expr { $do_firewall \
                    && ![iapp_is ::afm__staging_policy "/#do_not_use#"] \
                    ? "$::afm__staging_policy" \
                    : "none" }]
                    set security_logging [expr { $do_firewall \
                    && ![iapp_is ::afm__security_logging "/#do_not_use#"] \
                    ? "security-log-profiles replace-all-with \{\"$::afm__security_logging\"\}" \
                    : "security-log-profiles none" }]
                } else {
                    set security_logging ""
                }

                # array key: $allow_afm,$do_firewall,$new_firewall,tcp/udp
                array set firewall_arr {
                    1,1,1,tcp {
                        fw-enforced-policy \
                        [iapp_conf create security firewall policy ${app}_firewall \
                        rules replace-all-with \{ \
                        acceptPackets \{ \
                        action accept \
                        log no \
                        ip-protocol tcp \
                        status enabled \
                        source \{ [iapp_substa afm_restrict($::afm__restrict_by_addr)] \}\} \
                        dropPackets \{ \
                        action drop \
                        log yes \
                        ip-protocol tcp \
                        status enabled \
                        source \{ addresses replace-all-with \{ any/any \}\}\}\}] \
                        fw-staged-policy $staging_policy
                    }
                    1,1,1,udp {
                        fw-enforced-policy \
                        [iapp_conf create security firewall policy ${app}_firewall_udp \
                        rules replace-all-with \{ \
                        acceptPackets \{ \
                        action accept \
                        log no \
                        ip-protocol udp \
                        status enabled \
                        source \{ [iapp_substa afm_restrict($::afm__restrict_by_addr)] \}\} \
                        dropPackets \{ \
                        action drop \
                        log yes \
                        ip-protocol udp \
                        status enabled \
                        source \{ addresses replace-all-with \{ any/any \}\}\}\}] \
                        fw-staged-policy $staging_policy
                    }
                    1,1,0,tcp { fw-enforced-policy $::afm__policy fw-staged-policy $staging_policy }
                    1,1,0,udp { fw-enforced-policy $::afm__policy fw-staged-policy $staging_policy }
                    1,0,1,tcp { fw-enforced-policy none fw-staged-policy none }
                    1,0,1,udp { fw-enforced-policy none fw-staged-policy none }
                    1,0,0,tcp { fw-enforced-policy none fw-staged-policy none }
                    1,0,0,udp { fw-enforced-policy none fw-staged-policy none }
                    * { }
                }

                # array key: $::afm__restrict_by_addr
                array set afm_restrict {
                    /#create_new# {addresses replace-all-with \{ $::afm__allowed_addr \}}
                    /#do_not_use# {addresses replace-all-with \{ any/any \}}
                    * {address-lists replace-all-with \{ $::afm__restrict_by_addr \}}
                }
                proc addr_from_table { table } {
                    set addr_list ""
                    foreach row [set [set table]] {
                        if { [llength [join $row]] %2 == 1 } {
                            continue
                        }
                        array unset columns
                        array set columns [join $row]
                        if { $columns(addr) != "" } {
                            lappend addr_list $columns(addr)
                        }
                    }
                    return $addr_list
                }

                # ip-intelligence was a profile in 11.4, is a policy in 11.5
                # array keys:
                # $allow_afm,$do_firewall,$allow_by_reputation,$is_v11_5,policy/profile
                array set ip_intelligence_arr {
                    1,1,0,0,profile {
                        [iapp_conf create security ip-intelligence \
                        profile           ${app}_ip_intelligence \
                        defaults-from     ip-intelligence \
                        botnets           $::afm__restrict_by_reputation \
                        denial-of-service $::afm__restrict_by_reputation \
                        infected-sources  $::afm__restrict_by_reputation \
                        phishing          $::afm__restrict_by_reputation \
                        proxy             $::afm__restrict_by_reputation \
                        scanners          $::afm__restrict_by_reputation \
                        spam-sources      $::afm__restrict_by_reputation \
                        web-attacks       $::afm__restrict_by_reputation \
                        windows-exploits  $::afm__restrict_by_reputation]
                    }
                    1,1,0,1,policy {
                        ip-intelligence-policy [iapp_conf create security ip-intelligence \
                        policy             ${app}_ip_intelligence \
                        default-action     $action($::afm__restrict_by_reputation) \
                        blacklist-categories replace-all-with \{ \
                        botnets \{ action use-policy-setting \} \
                        cloud_provider_networks \{ action use-policy-setting \} \
                        denial_of_service \{ action use-policy-setting \} \
                        illegal_websites \{ action use-policy-setting \} \
                        infected_sources \{ action use-policy-setting \} \
                        phishing \{ action use-policy-setting \} \
                        proxy \{ action use-policy-setting \} \
                        scanners \{ action use-policy-setting \} \
                        spam_sources \{ action use-policy-setting \} \
                        web_attacks \{ action use-policy-setting \} \
                        windows_exploits \{ action use-policy-setting \}\}]
                    }
                    1,0,0,1,policy { ip-intelligence-policy none }
                    1,0,1,1,policy { ip-intelligence-policy none }
                    1,1,1,1,policy { ip-intelligence-policy none }
                    * { }
                }

                # array key: $::afm__restrict_by_reputation
                array set action {
                    accept { accept default-log-blacklist-hit-only no }
                    reject { drop   default-log-blacklist-hit-only yes }
                    warn   { accept default-log-blacklist-hit-only yes }
                }

                # SNAT
                set do_snat      [expr { [iapp_is ::pool__same_subnet  $::YES_ANSWER] \
                                     || ![iapp_is ::pool__bigip_route $::YES_ANSWER]  || !$advanced }]

                # array keys: $do_snat
                array set snat {
                    1   { snat automap }
                    *   { snat none }
                }

                # TCP profiles
                set tcp_same [expr { $advanced && ($::client__tcp_opt eq $::server__tcp_opt) }]

                # array keys: $::client/server__tcp_opt
                array set tcp_opt {
                    /#lan# { [iapp_conf create ltm profile tcp ${app}_lan_optimized_tcp \
                             defaults-from tcp-lan-optimized] }
                    /#wan# { [iapp_conf create ltm profile tcp ${app}_wan_optimized_tcp \
                             defaults-from tcp-wan-optimized] }
                    *      { <#> }
                }

                # array keys: $advanced,$tcp_same
                array set tcp_profiles {
                    1,1 { [string map "<#> $::client__tcp_opt" \
                          [iapp_substa tcp_opt($::client__tcp_opt)]] \{context all\} }
                    1,0 { [string map "<#> $::client__tcp_opt" \
                          [iapp_substa tcp_opt($::client__tcp_opt)]] \{context clientside\} \
                          [string map "<#> $::server__tcp_opt" \
                          [iapp_substa tcp_opt($::server__tcp_opt)]] \{context serverside\} }
                    *   { [subst $tcp_opt(/#wan#)] \{ context clientside \} \
                          [subst $tcp_opt(/#lan#)] \{ context serverside \} }
                }

                # UDP profile
                set udp_profile { [iapp_conf create ltm profile udp ${app}_udp_profile \
                                  defaults-from udp] }

                # SSL profiles
                set create_new_client_ssl \
                    [iapp_is ::ssl__client_ssl_profile $::DEFAULT_ANSWER]
                set idp_create_new_client_ssl \
                  [iapp_is ::apm__idp_client_ssl_profile $::DEFAULT_ANSWER]
                set do_server_ssl [iapp_is ::ssl__mode $::SSL_BRIDGING_ANSWER]
                set new_server_ssl [expr { !$advanced || \
                    [iapp_is ::ssl__server_ssl_profile $::DEFAULT_ANSWER] }]
                set do_chain_cert  [expr { $advanced && ![iapp_is ::ssl__use_cert_chain $::DO_NOT_USE_ANSWER] }]
                if { $is_v12_0 } {
                    set 12.0_cipher_bz "ciphers DEFAULT:!DHE:@STRENGTH"
                } else {
                    set 12.0_cipher_bz ""
                }
                set apm_client_ssl_profile {
                    [iapp_conf create ltm profile client-ssl ${app}_client_ssl \
                    defaults-from clientssl \
                    ciphers DEFAULT:!RC4:!MEDIUM:@STRENGTH \
                    key $::apm__key \
                    cert $::apm__cert \
                    ca-file [expr { $do_smart ? $::ssl__ca_bundle : "none" }]]
                }

                # array keys: $advanced,$create_new_client_ssl
                array set client_ssl_profile {
                    1,0 { $::ssl__client_ssl_profile }
                    * {
                      [iapp_conf create ltm profile client-ssl ${app}_client_ssl\
                      defaults-from clientssl \
                      ciphers DEFAULT:!RC4:!MEDIUM:@STRENGTH \
                      key $::ssl__key \
                      cert $::ssl__cert \
                      [iapp_substa chain_cert($do_chain_cert)] \
                      ca-file [expr { $do_smart ? $::ssl__ca_bundle : "none" }] \
                      client-cert-ca [expr { ( $do_smart && !$no_client_cert_ca ) ? $::ssl__client_cert_ca : "none" }] \
                      handshake-timeout [expr { $do_smart ? "60" : "10" }] \
                      peer-cert-mode [expr { $do_smart ? "request" : "ignore" }] \
                      options [expr { $do_smart ? "\{ dont-insert-empty-fragments no-tlsv1.2 \}" : "\{dont-insert-empty-fragments\}" }]]
                    }
                }

                # array keys: $idp_create_new_client_ssl
                array set idp_client_ssl_profile {
                    0 { $::apm__idp_client_ssl_profile }
                    1   {
                        [iapp_conf create ltm profile client-ssl ${app}_idp_client_ssl \
                        defaults-from clientssl \
                        ciphers DEFAULT \
                        key $::apm__idp_key \
                        cert $::apm__idp_cert]
                    }
                }

                # array keys: $do_apm,$do_server_ssl,$new_server_ssl
                array set server_ssl_profile {
                    0,0,0 {}
                    0,0,1 {}
                    0,1,0 { $::ssl__server_ssl_profile }
                    0,1,1 { [iapp_conf create ltm profile server-ssl ${app}_server_ssl \
                            defaults-from serverssl \
                            ${12.0_cipher_bz}] }
                    1,1,0 { $::ssl__server_ssl_profile }
                    *     { [iapp_conf create ltm profile server-ssl ${app}_server_ssl \
                            defaults-from serverssl \
                            server-name pcoip-default-sni \
                            ${12.0_cipher_bz}] }
                }

                # array keys: $do_chain_cert
                array set chain_cert {
                    0 { chain none }
                    1 { chain $::ssl__use_cert_chain }
                }

                # VDI profile
                # array keys: $is_v11_6
                array set vdi_profile {
                    1 { [iapp_conf create apm profile vdi ${app}_vdi \
                        defaults-from vdi] }
                    0 { /Common/remotedesktop }
                }
                # HTTP profile
                set x_forwarded_for [iapp_is ::pool__xff $::YES_ANSWER]

                # array keys: $advanced,$x_forwarded_for
                array set http_profile {
                    1,0 { [iapp_conf create ltm profile http ${app}_http \
                          defaults-from http \
                          redirect-rewrite matching \
                          insert-xforwarded-for disabled] }
                    *   { [iapp_conf create ltm profile http ${app}_http \
                          defaults-from http \
                          redirect-rewrite matching \
                          insert-xforwarded-for enabled] }
                }

                # Compression profile
                set do_compress  [expr { !$do_apm && \
                    ![iapp_is ::client__http_compression $::DO_NOT_USE_ANSWER] }]
                set new_compress [iapp_is ::client__http_compression $::DEFAULT_ANSWER]

                # array keys: $do_compress,$new_compress
                array set compression_profile {
                    1,1 { [iapp_conf create ltm profile http-compression \
                          ${app}_wan_optimized_compression \
                          defaults-from wan-optimized-compression \
                          content-type-include replace-all-with \{ $::HTTP_CONTENT_TYPES \}] }
                    1,0 $::client__http_compression
                    *   {}
                }
                # Caching profile
                set do_caching [expr { !$do_apm && \
                    ![iapp_is ::client__standard_caching $::DO_NOT_USE_ANSWER] }]
                set new_caching [iapp_is ::client__standard_caching $::DEFAULT_ANSWER]

                # array keys: $advanced,$do_caching,$new_caching
                array set caching_profile {
                    1,1,1 { [iapp_conf create ltm profile web-acceleration ${app}_caching \
                            defaults-from optimized-caching \
                            applications none \
                            cache-size 10 \
                            cache-object-max-size 2000000] }
                    1,1,0 { $::client__standard_caching }
                    *     {}
                }

                # OneConnect profile
                set do_oneconnect [expr { $advanced && !$do_apm && \
                    ![iapp_is ::server__oneconnect $::DO_NOT_USE_ANSWER] }]
                set new_oneconnect [iapp_is ::server__oneconnect $::DEFAULT_ANSWER]

                # array keys: $do_snat
                array set oneconnect_mask {
                    1   {255.255.255.255}
                    0   {0.0.0.0}
                }

                # array keys: $do_oneconnect,$new_oneconnect
                array set oneconnect_profile {
                    1,1 { [iapp_conf create ltm profile one-connect ${app}_oneconnect \
                         defaults-from oneconnect \
                         source-mask [iapp_substa oneconnect_mask($do_snat)]] }
                    1,0 $::server__oneconnect
                    *   {}
                }

                # AVR
                set do_analytics  [expr { $advanced && [iapp_get_provisioned avr] \
                     && ![iapp_is ::stats__analytics $::DO_NOT_USE_ANSWER] }]
                set new_analytics [iapp_is ::stats__analytics $::DEFAULT_ANSWER]

                # array keys: $do_analytics,$new_analytics
                array set analytics {
                    1,1 { [iapp_conf create ltm profile analytics ${app}_analytics \
                          defaults-from analytics] }
                    1,0 { $::stats__analytics }
                    *   {}
                }

                # Request logging
                set do_logging [expr { $advanced && \
                    ![iapp_is ::stats__request_logging $::DO_NOT_USE_ANSWER] }]

                # array keys: $do_logging
                array set request_logging {
                    1 { $::stats__request_logging }
                    0 {}
                }

                # Persistence
                set default_persist [iapp_is ::pool__persistence /#default#]
                set no_persist [iapp_is ::pool__persistence /#do_not_use#]

                # universal persistence
                set uni_persist_rule {when HTTP_REQUEST {
                    if { [HTTP::cookie exists "JSESSIONID"] } {
                        set jsess_id [string range [HTTP::cookie "JSESSIONID"] 0 31]
                        persist uie $jsess_id
                    } else {
                        set jsess [findstr [HTTP::uri] "tunnel?" 7]
                        if { $jsess != "" } {
                            persist uie $jsess
                        }
                    }
                }
                when HTTP_RESPONSE {
                    if { [HTTP::cookie exists "JSESSIONID"] } {
                        persist add uie [HTTP::cookie "JSESSIONID"]
                    }
                }}

                # array keys: $pcoip_forwarding
                array set non_https_persist_profile {
                    1 { persist replace-all-with \{ \
                        [iapp_conf create ltm persistence source-addr ${app}_src_addr \
                        defaults-from source_addr \
                        mirror enabled \
                        match-across-services enabled \
                        match-across-virtuals disabled] \{ default yes \}\} }
                    * { persist none }
                }

                # array keys: $do_apm, $pcoip_forwarding
                array set https_persist_profile {
                    0,0 { persist replace-all-with \{ \
                          [iapp_conf create ltm persistence source-addr ${app}_src_addr \
                          defaults-from source_addr \
                          mirror enabled \
                          match-across-services disabled \
                          match-across-virtuals disabled] \{ default yes \}\} }
                    0,1 { persist replace-all-with \{ \
                          [iapp_conf create ltm persistence source-addr ${app}_src_addr \
                          defaults-from source_addr \
                          mirror enabled \
                          match-across-services enabled \
                          match-across-virtuals disabled] \{ default yes \}\} }
                    *   { persist none }
                }

                # array keys: $advanced,$default_persist,$no_persist
                array set adv_https_persist_profile {
                    1,0,0 { persist replace-all-with \{ $::pool__persistence \} }
                    1,0,1 { persist none }
                    *     { [iapp_substa https_persist_profile($do_apm,$pcoip_forwarding)] }
                }

                # MONITORS
                set new_monitor [iapp_is ::monitor__monitor $::CREATE_NEW_ANSWER $::CREATE_ADVANCED_ANSWER]
                set advanced_monitor [expr {[iapp_is ::monitor__monitor $::CREATE_ADVANCED_ANSWER] && !$do_smart}]
                set monitor_interval [expr { $new_monitor \
                    ? "interval $::monitor__frequency \
                    timeout [expr {($::monitor__frequency * 3) + 1}]" \
                    : "interval 30 timeout 91" }]
                if { $advanced_monitor } {
                    set i 0
                    set pub_app_name ""
                    set script_1 "\{"
                    set script_2 "\{"
                    set script_3 "\{"
                    set script_4 "\{"
                    set script_5 "\{"
                    set script_6 ""
                    foreach row [join $::monitor__application] {
                        set value [string range [join $row] 4 end]
                        incr i
                        append pub_app_name "user-defined APP$i \"$value\" "
                        append script_1 "APP$i:\$APP$i, "
                        append script_2 "if \[ -z \$APP$i \]; then status$i=0; else grep \"<name>\$APP$i</name>\" /config/monitors/output_\${node_ip}_\${2}.txt 2>&1 > /dev/null; status$i=\$?; fi;"
                        if { $i == 1 } {
                            append script_3 "<name>\$APP$i</name>"
                            append script_4 "status$i"
                            append script_5 "\$APP$i:\$status$i"
                        }
                        if { $i > 1 } {
                            append script_3 "\\|<name>\$APP$i</name>"
                            append script_4 " + status$i"
                            append script_5 ", \$APP$i:\$status$i"
                        }
                    }
                    append script_1 "\}"
                    append script_2 "\}"
                    append script_3 "\}"
                    append script_4 "\}"
                    append script_5 "\}"
                    append script_6 "$i"
                }

array set eav {
    view_eav_script {#!/bin/sh
 # (c) Copyright 1996-2007 F5 Networks, Inc.
 #
 # This software is confidential and may contain trade secrets that are the
 # property of F5 Networks, Inc.  No part of the software may be disclosed
 # to other parties without the express written consent of F5 Networks, Inc.
 # It is against the law to copy the software.  No part of the software may
 # be reproduced, transmitted, or distributed in any form or by any means,
 # electronic or mechanical, including photocopying, recording, or information
 # storage and retrieval systems, for any purpose without the express written
 # permission of F5 Networks, Inc.  Our services are only available for legal
 # users of the program, for instance in the event that we extend our services
 # by offering the updating of files via the Internet.
 #
 # these arguments supplied automatically for all external monitors:
 # $1 = IP (nnn.nnn.nnn.nnn notation or hostname)
 # $2 = port (decimal, host byte order), used in URL to View Connection server
 #
 # Variables:
 # DEBUG, enter a value of 1 for logging, 2 for verbose logging /var/log/ltm
 # NETBIOS - domain for View user
 # USERNAME - username
 # PASSWORD - password for user (stored on BIG-IP in cleartext)
 # DISCLAIMER - 1, or 0 where 1 indicates View Connection servers are set to display pre-login message/disclaimer message
 # APP1, APP2, APP3, Etc - enter a value for monitored applications/desktops, APP1 value required. Supports spaces in pool or application name.
 # ALL - when set to 1 indicates all noted applications/pools must be returned for a healthy status
 #

 # set variable to pidfile
 pidfile="/var/run/`basename $0`.${node_ip}.$2.pid"
 # open file and kill existing process id
 if [ -f $pidfile ]
 then
 kill -9 `cat $pidfile`
 fi
 # echo process id and place into var
 echo "$$" > $pidfile

 # Set debug Variable
 if [ -n "$DEBUG" ]
     then
     if [ $DEBUG -gt 1 ]; then echo "EAV 'basename $0': \$DEBUG: $DEBUG" | logger -p local0.debug; fi
     else
     DEBUG=0
 fi
 # Format IP Address
 node_ip=`echo $1 | sed 's/::ffff://'`
 # Echo ARGS when debug enabled
 if [ $DEBUG -gt 0 ]; then echo "EAV 'basename $0': The following arguments or variables are used: IP:${node_ip}, PORT:${2}, NetBIOS:$NETBIOS, Username:$USERNAME, Password:$PASSWORD, Disclaimer:$DISCLAIMER, <SCRIPT1> ALL Applications Specified Must Be Available (1 = True. 0=False):${10}$ALL" | logger -p local0.debug; fi
  # Set Encryption based on Port used; when = 443 then use encryption otherwise do not use encryption to View Conection Server
 if [ ${2} -eq 443 ]
     then
     encrypted=Yes
     http=https
 if [ $DEBUG -gt 0 ]; then echo "EAV 'basename $0' :View Connection server ${node_ip}:${2} is using HTTPS" | logger -p local0.debug; fi
 else
 encrypted=No
 http=http
 if [ $DEBUG -gt 0 ]; then echo "EAV 'basename $0' :View Connection server ${node_ip}:${2} is NOT using HTTPS" | logger -p local0.debug; fi
 fi
 # set post content and calculate content length
 # initial post
 content1="<?xml version=\"1.0\" encoding=\"UTF-8\"?><broker version=\"9.0\"><set-locale><locale>en-us</locale></set-locale><get-configuration><supported-features><feature>lastUserActivity</feature><feature>reauthentication</feature></supported-features></get-configuration></broker>"
 content1_length=${#content1}
 if [ $DEBUG -gt 1 ]; then echo "EAV 'basename $0': ${node_ip}:${2} content1=$content1, length=$content1_length" | logger -p local0.debug; fi
 # Accept disclaimer post
 content2="<?xml version=\"1.0\" encoding=\"UTF-8\"?><broker version=\"9.0\"><do-submit-authentication><screen><name>disclaimer</name><params><param><name>accept</name><values><value>true</value></values></param></params></screen></do-submit-authentication></broker>"
 content2_length=${#content2}
 if [ $DEBUG -gt 1 ]; then echo "EAV 'basename $0': ${node_ip}:${2} content1=$content2, length=$content2_length" | logger -p local0.debug; fi
 # Authentication post
 content3="<?xml version=\"1.0\" encoding=\"UTF-8\"?><broker version=\"9.0\"><do-submit-authentication><screen><name>windows-password</name><params><param><name>username</name><values><value>$USERNAME</value></values></param><param><name>domain</name><values><value>$NETBIOS</value></values></param><param><name>password</name><values><value>$PASSWORD</value></values></param></params></screen></do-submit-authentication></broker>"
 content3_length=${#content3}
 if [ $DEBUG -gt 1 ]; then echo "EAV 'basename $0': ${node_ip}:${2} content1=$content3, length=$content3_length" | logger -p local0.debug; fi
 # Send available applicaiton request
 content4="<?xml version=\"1.0\" encoding=\"UTF-8\"?><broker version=\"9.0\"><get-tunnel-connection/><get-user-global-preferences/><get-launch-items><desktops><supported-protocols><protocol><name>PCOIP</name></protocol><protocol><name>RDP</name></protocol></supported-protocols></desktops><applications><supported-types><type><name>remote</name><supported-protocols><protocol><name>PCOIP</name></protocol></supported-protocols></type></supported-types></applications><application-sessions/></get-launch-items></broker>"
 content4_length=${#content4}
 if [ $DEBUG -gt 1 ]; then echo "EAV 'basename $0': ${node_ip}:${2} content1=$content4, length=$content4_length" | logger -p local0.debug; fi
 # Make initial broker request and grab JSESIONID cookie
 if [ $DEBUG -gt 0 ]; then echo "EAV 'basename $0': Checking ${node_ip}:${2}, sending first request" | logger -p local0.debug; fi
 echo "initial file" > /config/monitors/intoutput_${node_ip}_${2}.txt
 curl -kfNsg -o /config/monitors/intoutput_${node_ip}_${2}.txt -c /config/monitors/view_cookie_${node_ip}_${2}.txt -X POST $http://${node_ip}/broker/xml -H "User-Agent: VMware-client" -H "Host: ${node_ip}" -H "Accept: */*" -H "Cookie: " -H "Content-Length: $content1_length" -H "Content-Type: application/x-www-form-urlencoded" -d "$content1" 2>&1 > /dev/null
 grep "<result>ok</result>" /config/monitors/intoutput_${node_ip}_${2}.txt 2>&1 > /dev/null
 initstat=$?
 # Extract SESSIONID from Cookie file
 if [ $initstat -eq 0 ]
 then
 jsession1=`sed -n '5{p;q;}' /config/monitors/view_cookie_${node_ip}_${2}.txt`
 jsession1_echo=$(echo "${jsession1: -32}" )
 if [ $DEBUG -gt 0 ];then echo "EAV 'basename $0': Initial request successful (0=OK):$initstat. Successfully extracted SESSION ID: $jsession1_echo for server: ${node_ip}:${2} from first request" | logger -p local0.debug; fi
 else
 if [ $DEBUG -gt 0 ];then echo "EAV 'basename $0': Initial request unsuccessful (0=OK):$initstat. Verify server:${node_ip}:${2} is on and accepting traffic on port ${2}, marking node DOWN" | logger -p local0.debug; fi
 rm -f /config/monitors/intoutput_${node_ip}_${2}.txt
 exit
 fi
 # Accept disclaimer
 if [ $DISCLAIMER -eq 1 ]
 then
 if [ $DEBUG -gt 0 ]; then echo "EAV 'basename $0' : Connection server disclaimer enabled, accepting disclaimer for server: ${node_ip}:${2}" | logger -p local0.debug; fi
 curl -kfNsg -o /config/monitors/disoutput_${node_ip}_${2}.txt -X POST $http://${node_ip}/broker/xml -H "User-Agent: VMware-client" -H "Host: ${node_ip}" -H "Accept: */*" -H "Cookie: JSESSIONID=$jsession1_echo;" -H "Content-Length: $content2_length" -H "Content-Type: application/x-www-form-urlencoded" -d "$content2" 2>&1 > /dev/null
 disstat=$?
 if [ $disstat -eq 0 ]
 then
 if [ $DEBUG -gt 0 ]; then echo "EAV 'basename $0' : Accepted disclaimer (0=OK):$disstat, sending authenticaiton request for server: ${node_ip}:${2}" | logger -p local0.debug; fi
 else
 if [ $DEBUG -gt 0 ]; then echo "EAV 'basename $0' : Disclaimer not accepted (0=OK):$disstat, verify pre-message is enabled on connection server: ${node_ip}:${2}" | logger -p local0.debug; fi
 fi
 else
 if [ $DEBUG -gt 0 ]; then echo "EAV 'basename $0' : Connection server disclaimer disabled, sending authentication request for server: ${node_ip}:${2}" | logger -p local0.debug; fi
 fi
 # Send authentication and grab new jsessionid
 curl -kfNsg -o /config/monitors/authoutput_${node_ip}_${2}.txt -c /config/monitors/view_cookie2_${node_ip}_${2}.txt -X POST $http://${node_ip}/broker/xml -H "User-Agent: VMware-client" -H "Host: ${node_ip}" -H "Accept: */*" -H "Cookie: JSESSIONID=$jsession1_echo;" -H "Content-Length: $content3_length" -H "Content-Type: application/x-www-form-urlencoded" -d "$content3" 2>&1 > /dev/null
 grep "<result>ok</result>" /config/monitors/authoutput_${node_ip}_${2}.txt 2>&1 > /dev/null
 sendauth=$?
 if [ $sendauth -eq 0 ]
 then
 if [ $DEBUG -gt 0 ];then echo "EAV 'basename $0': Authenticated successfully (0=OK):$sendauth ." | logger -p local0.debug; fi
 else
 grep "<value>Unknown user name or bad password.</value>" /config/monitors/authoutput_${node_ip}_${2}.txt 2>&1 > /dev/null
 sendauthbad=$?
 grep "<name>disclaimer</name>" /config/monitors/authoutput_${node_ip}_${2}.txt 2>&1 > /dev/null
 sendauthdis=$?
 if [ $sendauthbad -eq 0 ]
 then
 if [ $DEBUG -gt 0 ];then echo "EAV 'basename $0': Authentication unsuccessfull (0=OK):$sendauth. Verify username, password, netbios, and disclaimer parameters are correct. Server:${node_ip}:${2} marked DOWN" | logger -p local0.debug; fi
 else
 if [ $sendauthdis -eq 0 ]
 then
 if [ $DEBUG -gt 0 ];then echo "EAV 'basename $0': Connection server set with pre-message (response with disclaimer=0):$sendauthdis, set monitor to use DISCLAIMER or disable pre-message on ${node_ip}:${2}. Marking node DOWN." | logger -p local0.debug; fi
 else
 if [ $DEBUG -gt 0 ];then echo "EAV 'basename $0': Unknown logon error, marking node DOWN." | logger -p local0.debug; fi
 fi
 fi
 rm -f /config/monitors/authoutput_${node_ip}_${2}.txt
 exit
 fi
 jsession2=`sed -n '5{p;q;}' /config/monitors/view_cookie2_${node_ip}_${2}.txt`
 jsession2_echo=$(echo "${jsession2: -32}" )
 if [ -z $jsession2_echo ]
 then
 if [ $DEBUG -gt 0 ];then echo "EAV 'basename $0': Unable to extracted second jsesion cookie:$jsession2_echo, could be pre-message is enabled on: ${node_ip}:${2}. If so, set DISCLAIMER variable equal to 1 (or #6 argument)" | logger -p local0.debug; fi
 else
 if [ $DEBUG -gt 0 ];then echo "EAV 'basename $0': Successfully extracted second jsesion cookie:$jsession2_echo, sending published application request for server: ${node_ip}:${2}." | logger -p local0.debug; fi
 fi
 # request entitled and available applications
 if [ $ALL -eq 1 ]
 then
 curl -kfNsg -o /config/monitors/output_${node_ip}_${2}.txt -X POST $http://${node_ip}/broker/xml -H "User-Agent: VMware-client" -H "Host: ${node_ip}" -H "Accept: */*" -H "Cookie: JSESSIONID=$jsession2_echo;" -H "Content-Length: $content4_length" -H "Content-Type: application/x-www-form-urlencoded" -d "$content4" 2>&1 > /dev/null
 authstat=$?
 <SCRIPT2>
 else
 curl -kfNsg -X POST $http://${node_ip}/broker/xml -H "User-Agent: VMware-client" -H "Host: ${node_ip}" -H "Accept: */*" -H "Cookie: JSESSIONID=$jsession2_echo;" -H "Content-Length: $content4_length" -H "Content-Type: application/x-www-form-urlencoded" -d "$content4" | grep "<SCRIPT3>" 2>&1 > /dev/null
 status0=$?
 fi
 # echo process status
 status=$(($status0 + <SCRIPT4>))
 if [ $status -eq 0 ]
 then
     if [ $ALL -eq 1 ]
     then
         if [ $DEBUG -gt 0 ];then echo "EAV 'basename $0': Application request successful:$authstat, all applications are present. Status (0=OK) <SCRIPT5>. Final status: $status server: ${node_ip}:${2} will be marked UP." | logger -p local0.debug; fi
     else
         if [ $DEBUG -gt 0 ];then echo "EAV 'basename $0': Application request successful:$authstat, at least one application is present. Status (0=OK) <SCRIPT5>. Final status: $status server: ${node_ip}:${2} will be marked UP." | logger -p local0.debug; fi
     fi
 else
     if [ $ALL -eq 1 ]
     then
         if [ $DEBUG -gt 0 ];then echo "EAV 'basename $0': Application request successful:$authstat, not all applications are present. Status (0=OK) <SCRIPT5>. Final status: $status server: ${node_ip}:${2} will be marked DOWN." | logger -p local0.debug; fi
     else
         if [ $DEBUG -gt 0 ];then echo "EAV 'basename $0': Application request successful:$authstat, no applications are present. Status (0=OK) <SCRIPT5>. Final status: $status server: ${node_ip}:${2} will be marked DOWN." | logger -p local0.debug; fi
     fi
 fi
 #if status is 0 then monitor flaged as up, otherwise monitor is down
 # remove cookie file, and remove pidfile var
 if [ $status -eq 0 ]
 then
     rm -f $pidfile
     rm -f /config/monitors/view_cookie_${node_ip}_${2}.txt
     rm -f /config/monitors/view_cookie2_${node_ip}_${2}.txt
     rm -f /config/monitors/output_${node_ip}_${2}.txt
     rm -f /config/monitors/intoutput_${node_ip}_${2}.txt
     rm -f /config/monitors/authoutput_${node_ip}_${2}.txt
     rm -f /config/monitors/disoutput_${node_ip}_${2}.txt
     echo "UP"
 else
     rm -f $pidfile
     rm -f /config/monitors/view_cookie_${node_ip}_${2}.txt
     rm -f /config/monitors/view_cookie2_${node_ip}_${2}.txt
     rm -f /config/monitors/output_${node_ip}_${2}.txt
     rm -f /config/monitors/intoutput_${node_ip}_${2}.txt
     rm -f /config/monitors/authoutput_${node_ip}_${2}.txt
     rm -f /config/monitors/disoutput_${node_ip}_${2}.txt
 fi
 exit
 }}

                # TCP monitor
                set tcp_monitor { [iapp_conf create ltm monitor tcp ${app}_tcp \
                    defaults-from tcp $monitor_interval] }

                # UDP monitor
                set udp_monitor { [iapp_conf create ltm monitor udp ${app}_udp \
                    defaults-from udp $monitor_interval] }
                
                # HTTP monitor
                # array keys: $new_monitor,$advanced_monitor,$do_server_ssl
                array set http_monitor {
                    1,0,0     { [iapp_conf create ltm monitor http ${app}_http \
                              defaults-from http \
                              send \"GET /broker/xml/ HTTP/1.1\\r\\nHost: $::pool__fqdn\\r\\nConnection: Close\\r\\n\\r\\n\" \
                              recv \"clientlaunch-default\" \
                              $monitor_interval \
                              time-until-up 0] }
                    1,0,1     { [iapp_conf create ltm monitor https ${app}_https \
                              defaults-from https \
                              send \"GET /broker/xml/ HTTP/1.1\\r\\nHost: $::pool__fqdn\\r\\nConnection: Close\\r\\n\\r\\n\" \
                              recv \"clientlaunch-default\" \
                              $monitor_interval \
                              time-until-up 0 \
                              compatibility enabled \
                              cipherlist DEFAULT:+SHA:+3DES:+kEDH] }
                    1,1,0     { [iapp_conf create ltm monitor external \
                        ${app}_adv_view_eav_monitor \
                        run [iapp_conf create sys file external-monitor ${app}_adv_view_eav source-path file:[create_eav_script view_eav_script]] \
                        $pub_app_name \
                        user-defined ALL $::monitor__application_all \
                        user-defined DEBUG $::monitor__debug \
                        user-defined DISCLAIMER $::monitor__disclaimer \
                        user-defined NETBIOS [string toupper $::monitor__netbios_name] \
                        user-defined PASSWORD "\"$::monitor__passwd\"" \
                        user-defined USERNAME $::monitor__user \
                         $monitor_interval] }
                    1,1,1     { [iapp_conf create ltm monitor external \
                            ${app}_adv_view_eav_monitor \
                            run [iapp_conf create sys file external-monitor ${app}_adv_view_eav source-path file:[create_eav_script view_eav_script]] \
                        $pub_app_name \
                        user-defined ALL $::monitor__application_all \
                        user-defined DEBUG $::monitor__debug \
                        user-defined DISCLAIMER $::monitor__disclaimer \
                        user-defined NETBIOS [string toupper $::monitor__netbios_name] \
                        user-defined PASSWORD "\"$::monitor__passwd\"" \
                        user-defined USERNAME $::monitor__user \
                             $monitor_interval] }
                    *     { $::monitor__monitor }
                }

                # POOLS
                set use_slow_ramp [iapp_is ::pool__use_slow_ramp $::YES_ANSWER]
                set use_pga       [iapp_is ::pool__use_pga $::YES_ANSWER]
                set tcp_queuing   [iapp_is ::pool__tcp_req_queuing $::YES_ANSWER]

                # array keys: $advanced,$use_slow_ramp
                array set pool_slow_ramp {
                    *   { slow-ramp-time 300 }
                    1,0 { slow-ramp-time 10 }
                    1,1 { slow-ramp-time $::pool__slow_ramp_setvalue }
                }

                # array keys: $advanced,$use_pga
                array set pool_pga {
                    1,1 { min-active-members $::pool__min_active_members }
                    *   { min-active-members 0 }
                }

                # array keys: $advanced,$tcp_queuing
                array set tcp_req_queuing {
                    1,1 { queue-on-connection-limit enabled \
                          queue-depth-limit $::pool__tcp_queue_length \
                          queue-time-limit  $::pool__tcp_queue_timeout }
                    *   { queue-on-connection-limit disabled }
                }

                # array keys: $advanced,$lb_lcm_licensed
                array set pool_lb_method {
                    0,1 { load-balancing-mode least-connections-member }
                    0,0 { load-balancing-mode round-robin }
                    *   { load-balancing-mode $::pool__lb_method_choice }
                }

                # 1 or 0 is added to http pool name as workaround to BZ407719 in TMOS v11.3
                set http_pool { pool [iapp_conf create ltm pool ${app}_pool_$do_server_ssl \
                        [iapp_substa pool_lb_method($advanced,$lb_lcm_licensed)] \
                        [iapp_pool_members $::pool__pool_members] \
                        monitor [iapp_substa http_monitor($new_monitor,$advanced_monitor,$do_server_ssl)] \
                        [iapp_substa pool_slow_ramp($advanced,$use_slow_ramp)] \
                        [iapp_substa tcp_req_queuing($advanced,$tcp_queuing)] \
                        [iapp_substa pool_pga($advanced,$use_pga)]] }

                set pcoip_pool { pool [iapp_conf create ltm pool ${app}_pcoip_pool \
                        [iapp_substa pool_lb_method($advanced,$lb_lcm_licensed)] \
                        [iapp_pool_members $::pool__pool_members -port 4172] \
                        monitor [subst $tcp_monitor] and [subst $udp_monitor] \
                        [iapp_substa pool_slow_ramp($advanced,$use_slow_ramp)] \
                        [iapp_substa pool_pga($advanced,$use_pga)]] }

                set html5_pool { pool [iapp_conf create ltm pool ${app}_html5_pool \
                        [iapp_substa pool_lb_method($advanced,$lb_lcm_licensed)] \
                        [iapp_pool_members $::pool__pool_members -port 8443] \
                        monitor [subst $tcp_monitor] \
                        [iapp_substa pool_slow_ramp($advanced,$use_slow_ramp)] \
                        [iapp_substa pool_pga($advanced,$use_pga)]] }

                # APM
                if { $do_apm } {
                    # APM string map. Define your APM implementation here.
                    set apm_map(prefix) [tmsh::pwd]/$app
                    # array keys: $advanced
                    array set aaa_items {
                        1 { destination *:[expr {[iapp_is ::apm__ad_monitor_secure \
                            $::SSL_ANSWER] ? $::apm__ad_monitor_port_secure \
                            : $::apm__ad_monitor_port}] \
                            interval $::apm__ad_monitor_interval \
                            timeout [expr {$::apm__ad_monitor_interval * 3 + 1}] }
                        0 { destination *:[expr {[iapp_is ::apm__ad_monitor_secure \
                            $::SSL_ANSWER] ? "636" : "389" }] \
                            interval 30 timeout 91 }
                    }
                    # array keys: $advanced
                    array set radius_aaa_items {
                        1 { interval $::apm__radius_monitor_interval \
                            timeout [expr {$::apm__radius_monitor_interval * 3 + 1}] }
                        0 { interval 30 timeout 91 }
                    }
                    # array keys: $radius_ipv6_nas
                    array set radius_ipv6_nas_ip {
                        1 { nas-ipv6-address [expr {[info exists ::apm__radius_nas_ip] && $::apm__radius_nas_ip ne "" ? "$::apm__radius_nas_ip" : "any6" }] \
                            nas-ip-address "any6" }
                        0 { nas-ip-address [expr {[info exists ::apm__radius_nas_ip] && $::apm__radius_nas_ip ne "" ? "$::apm__radius_nas_ip" : "any6" }] \
                            nas-ipv6-address "any6" }

                    }
                    # array keys: $::apm__ad_monitor
                    array set aaa_monitor {
                        /#create_new# { [iapp_conf create ltm monitor ldap ${app}_ldap \
                        defaults-from /Common/ldap \
                        [iapp_substa aaa_items($advanced)] \
                        base \"$::apm__ad_monitor_tree\" \
                        filter \"cn=$::apm__ad_monitor_user\" \
                        security $::apm__ad_monitor_secure \
                            username \"cn=$::apm__ad_monitor_user,$::apm__ad_monitor_tree\" \
                            password [iapp_make_safe_password "$::apm__ad_monitor_password"] \
                            mandatory-attributes no \
                            chase-referrals yes \
                            time-until-up 0 \
                            debug no] }
                        /#use_icmp# { [iapp_conf create ltm monitor gateway-icmp \
                            ${apm_map(prefix)}_icmp \
                            defaults-from gateway_icmp \
                            time-until-up 0 \
                            interval 5 \
                            timeout 16] }
                        /#do_not_use# { none }
                        * { $::apm__ad_monitor }
                    }
                    # array keys: $::apm__radius_monitor
                    array set radius_aaa_monitor {
                        /#create_new# { [iapp_conf create ltm monitor radius ${app}_radius \
                        defaults-from /Common/radius \
                        [iapp_substa radius_aaa_items($advanced)] \
                        nas-ip-address [expr { [info exists ::apm__radius_nas_ip] && $::apm__radius_nas_ip ne "" ? "$::apm__radius_nas_ip" : "none" }] \
                        username $::apm__radius_monitor_user \
                        password [iapp_make_safe_password "$::apm__radius_monitor_password"] \
                        secret [iapp_make_safe_password \
                        "$::apm__radius_secret"] \
                        ] }
                        /#use_icmp# { [iapp_conf create ltm monitor gateway-icmp \
                            ${apm_map(prefix)}_icmp \
                            defaults-from gateway_icmp \
                            time-until-up 0 \
                            interval 5 \
                            timeout 16] }
                        /#do_not_use# { none }
                        * { $::apm__radius_monitor }
                    }
                    # array keys: $create_new_aaa_profile,$create_new_multiple_profile,$do_smart
                    array set aaa_server {
                        1,0,0 {
                            [iapp_conf create apm aaa active-directory \
                            ${apm_map(prefix)}_aaa \{ \
                            [expr { $::apm__credentials eq $YES_ANSWER \
                            ? "admin-name \"$::apm__active_directory_username\" \
                            admin-encrypted-password [iapp_make_safe_password \
                            "$::apm__active_directory_password"]" : "" }] \
                            domain $::apm__netbios_domain \
                            domain-controllers [iapp_pool_members -aaa_domain -fields { host host } \
                            $::apm__active_directory_server] \
                            pool [iapp_conf create ltm pool ${app}_aaa_pool \
                            load-balancing-mode round-robin \
                            [iapp_pool_members -aaa_pool -port 0 \
                            $::apm__active_directory_server] \
                            monitor [iapp_substa aaa_monitor($::apm__ad_monitor)] \
                            min-active-members 1]\}]
                        }
                        0,1,0 { [trust_aaa $::apm__multiple_domain ${apm_map(prefix)}] }
                        1,1,0 { [trust_aaa $::apm__multiple_domain ${apm_map(prefix)}] }
                        0,0,0 { $::apm__aaa_profile }
                        * {}
                    }
                    # array keys: $create_new_radius_profile,$radius
                    array set radius_aaa_server {
                            1,1 {
                                [iapp_conf create apm aaa radius \
                                ${apm_map(prefix)}_radius_aaa \{ \
                                auth-port $::apm__auth_service_port \
                                mode "auth" \
                                secret [iapp_make_safe_password \
                                "$::apm__radius_secret"] \
                                [iapp_substa radius_ipv6_nas_ip($radius_ipv6_nas)] \
                                pool [iapp_conf create ltm pool ${app}_radius_aaa_pool \
                                load-balancing-mode round-robin \
                                [iapp_pool_members $::apm__radius_server -aaa_pool -port $::apm__auth_service_port] \
                                monitor [iapp_substa radius_aaa_monitor($::apm__radius_monitor)] \
                                min-active-members 1]\}]

                            }
                            0,1 {$::apm__radius_aaa_profile}
                            * {}
                    }

                    # Set NAT address for PCoIP proxy if one exisits
                    set nat_addr   [expr { [info exists ::apm__nat_proxy_addr] \
                                   && $::apm__nat_proxy_addr ne "" }]

                    # Any unused action items be removed
                    if { !$html5 } {
                        unset -nocomplain pcoip_proxy_apm_map(act_logon_page)
                        unset -nocomplain pcoip_proxy_apm_map(act_logon_page_1)
                        unset -nocomplain pcoip_proxy_apm_map(act_message_box)
                        unset -nocomplain pcoip_proxy_apm_map(act_securid_1)
                        unset -nocomplain pcoip_proxy_apm_map(act_radius_1)
                        unset -nocomplain pcoip_proxy_apm_map(act_variable_assign_1)
                        unset -nocomplain pcoip_proxy_apm_map(act_variable_assign_2)
                        unset -nocomplain pcoip_proxy_apm_map(act_variable_assign_3)
                        unset -nocomplain pcoip_proxy_apm_map(act_variable_assign_5)
                        unset -nocomplain pcoip_proxy_apm_map(act_active_directory_auth_1)
                        unset -nocomplain pcoip_proxy_apm_map(act_full_resource_assign_1)
                        unset -nocomplain pcoip_proxy_apm_map(client_cert_inspection_1)
                        unset -nocomplain pcoip_proxy_apm_map(act_vmware_view_policy_1)
                    }
                    if { !$usb_redirect } {
                        unset -nocomplain pcoip_proxy_apm_map(act_vmware_view_policy)
                        unset -nocomplain pcoip_proxy_apm_map(act_vmware_view_policy_1)
                    }
                    if { !$disclaimer } {
                        unset -nocomplain pcoip_proxy_apm_map(act_vmware_logon_page)
                        unset -nocomplain pcoip_proxy_apm_map(act_message_box)
                    }
                    if { !$two_factor } {
                        unset -nocomplain pcoip_proxy_apm_map(act_vmware_logon_page_1)
                        unset -nocomplain pcoip_proxy_apm_map(act_logon_page)
                        unset -nocomplain pcoip_proxy_apm_map(act_variable_assign_1)
                    }
                    if { !$securid } {
                        unset -nocomplain pcoip_proxy_apm_map(act_securid)
                        unset -nocomplain pcoip_proxy_apm_map(act_securid_1)
                    }
                    if { $two_factor } {
                        unset -nocomplain pcoip_proxy_apm_map(act_logon_page_1)
                    }
                    if { !$radius } {
                        unset -nocomplain pcoip_proxy_apm_map(act_radius)
                        unset -nocomplain pcoip_proxy_apm_map(act_radius_1)
                    }
                    if { !$nat_addr } {
                        unset -nocomplain pcoip_proxy_apm_map(act_variable_assign)
                        unset -nocomplain pcoip_proxy_apm_map(act_variable_assign_3)
                    }
                    if { $create_new_multiple_profile } {
                        unset -nocomplain pcoip_proxy_apm_map(act_variable_assign_2)
                    }
                    if { $do_smart } {
                        unset -nocomplain pcoip_proxy_apm_map(act_vmware_logon_page_2)
                        unset -nocomplain pcoip_proxy_apm_map(act_active_directory_auth)
                        unset -nocomplain pcoip_proxy_apm_map(act_active_directory_auth_1)
                        unset -nocomplain pcoip_proxy_apm_map(act_logon_page_1)
                        unset -nocomplain pcoip_proxy_apm_map(act_variable_assign_2)
                        unset -nocomplain pcoip_proxy_apm_map(act_vmware_logon_page_1)
                        unset -nocomplain pcoip_proxy_apm_map(act_logon_page)
                        unset -nocomplain pcoip_proxy_apm_map(act_securid)
                        unset -nocomplain pcoip_proxy_apm_map(act_securid_1)
                        unset -nocomplain pcoip_proxy_apm_map(act_radius)
                        unset -nocomplain pcoip_proxy_apm_map(act_radius_1)
                        unset -nocomplain pcoip_proxy_apm_map(act_variable_assign_1)
                        unset -nocomplain pcoip_proxy_apm_map(act_vmware_logon_page)
                        unset -nocomplain pcoip_proxy_apm_map(act_message_box)
                    }
                    if { !$do_smart } {
                        unset -nocomplain pcoip_proxy_apm_map(act_variable_assign_4)
                        unset -nocomplain pcoip_proxy_apm_map(act_variable_assign_5)
                        unset -nocomplain pcoip_proxy_apm_map(client_cert_inspection)
                        unset -nocomplain pcoip_proxy_apm_map(client_cert_inspection_1)
                        unset -nocomplain pcoip_proxy_apm_map(act_vmware_logon_page_3)
                    }
                    # Multiple Domain Setup
                    proc multi_aaa { existing name } {
                        set i 0
                        set aaa_servers ""
                        foreach row [join $::apm__multiple] {
                            # Skip invalid table rows.
                            if { [llength [join $row]] %2 == 1 } {
                                continue
                            }
                            array unset columns
                            array set columns [join $row]
                            set aaa_ad_server $columns(aaa_ad_servers)
                            append aaa_servers "$aaa_ad_server "
                        }
                        return $aaa_servers
                    }
                    proc trust_aaa { existing name } {
                        tmsh::include f5.iapp.1.5.1.cli
                        set aaa_setup ""
                        append aaa_setup [iapp_conf create apm aaa active-directory-trusted-domains \
                                         ${name}_aaa_trust \{ \
                                         root-domain [lindex [multi_aaa $existing $name] 0] \
                                         trusted-domains replace-all-with \{ \
                                         [multi_aaa $existing $name] \} \}]
                        return $aaa_setup
                    }
                    # Initial string map inserts APL variables into the APM config.
                    # Define the association with presentation variables here.
                    # Also, define any APM parameters that change between TMOS v11.2 and v11.4.
                    set v11_4 [iapp_tmos_version >= 11.4]
                    set pre_proc_map {
                        <POOL_FQDN>       "${::pool__fqdn}:$::pool__vs_port"
                        <NETBIOS_NAME>    "[expr { !$do_smart ? [string toupper $::apm__netbios_name] :""}]"
                    }
                    if { $is_v12_0 } {
                        if { $::apm__logging == "/#do_not_use#" } {
                            append pre_proc_map { <LOG_SETTINGS> "log-settings none" }
                        } else {
                            append pre_proc_map { <LOG_SETTINGS> "log-settings replace-all-with \{ $::apm__logging \}" }
                        }
                    } else {
                        append pre_proc_map { <LOG_SETTINGS> "" }
                    }
                    if { $create_new_multiple_profile } {
                        append pre_proc_map { <AAA_SERVER> "server none trusted-domains [lindex \
                        [iapp_substa aaa_server($create_new_aaa_profile,$create_new_multiple_profile,$do_smart)] \
                        end ] upn true\n"
                        }
                        if { $html5 } {
                            set netbios_select ""
                            foreach row $::apm__netbios_name {
                                append netbios_select [string toupper $row]
                                append netbios_select ";"
                            }
                            set netbios_select [string range $netbios_select 0 end-1]
                            append pre_proc_map { <MULTI_LOGON> "field-type4 select\n post-var-name4 domain\n sess-var-name4 domain\n selectvalues4 \\\\\\\"$netbios_select\\\\\\\"" }
                        }
                    } else {
                        if { $is_v11_5 } {
                            append pre_proc_map { <AAA_SERVER> "server [iapp_substa aaa_server($create_new_aaa_profile,$create_new_multiple_profile,$do_smart)] trusted-domains none upn false" }
                            append pre_proc_map { <MULTI_LOGON> "field-type4 none\n post-var-name4 field4\n sess-var-name4 field4\n" }
                        } else {
                            append pre_proc_map { <AAA_SERVER> "server [iapp_substa aaa_server($create_new_aaa_profile,$create_new_multiple_profile,$do_smart)]" }
                            append pre_proc_map { <MULTI_LOGON> "field-type4 none\n post-var-name4 field4\n sess-var-name4 field4\n" }
                        }
                    }

                # Invoke the pre-processing map to get the final APM definition array
                
                
        if { $do_apm } {
            # array keys: $html5,$disclaimer,$two_factor,$do_smart
            array set client_type_next_1 {
                1,1,1,0    act_message_box
                1,1,0,0 act_message_box
                1,0,1,0 act_logon_page
                1,0,0,0    act_logon_page_1
                1,1,1,1    client_cert_inspection_1
                1,1,0,1 client_cert_inspection_1
                1,0,1,1 client_cert_inspection_1
                1,0,0,1    client_cert_inspection_1
                *         end_deny
            }
            # array keys: $do_smart,$disclaimer,$two_factor
            array set client_type_next_2 {
                1,1,1     act_vmware_logon_page_3
                1,1,0     act_vmware_logon_page_3
                1,0,1     act_vmware_logon_page_3
                1,0,0     act_vmware_logon_page_3
                0,1,1     act_vmware_logon_page
                0,1,0     act_vmware_logon_page
                0,0,1     act_vmware_logon_page_1
                0,0,0    act_vmware_logon_page_2
            }
            # array keys: $do_smart,$two_factor
            array set message_box_next {
                1,1        client_cert_inspection_1
                1,0        client_cert_inspection_1
                0,1        act_logon_page
                *        act_logon_page_1
            }
            # array keys: $do_smart,$two_factor
            array set vmware_logon_next {
                1,1        act_vmware_logon_page_3
                1,0        act_vmware_logon_page_3
                0,1        act_vmware_logon_page_1
                *        act_vmware_logon_page_2
            }
            # array keys: $do_smart,$is_v12_0
            array set remote_desktop_broker {
                1,1     "broker-auth saml sso-saml-resource ${app}.app/${app}_view"
                0,1     "broker-auth password sso-saml-resource none"
                *       ""
            }
            # array keys: $securid,$radius,$html5
            array set two_factor_field3 {
                1,0,1 "$::apm__use_securid_field3"
                0,1,1 "$::apm__use_radius_field3"
                0,0,0 "Field 3"
                *   "Field 3"
            }
            # array keys: $create_new_multiple_profile,$usb_redirect
            array set multi_usb_redirect {
                1,1 "act_vmware_view_policy_1"
                1,0 "act_active_directory_auth_1"
                0,1 "act_variable_assign_2"
                0,0 "act_variable_assign_2"
            }
            # array keys: $do_smart,$usb_redirect
            array set smart_usb_redirect {
                1,1 "act_vmware_view_policy"
                1,0 "act_variable_assign_4"
                0,1 "act_vmware_view_policy"
                0,0 "act_active_directory_auth"
            }
            # array keys: $do_smart,$usb_redirect
            array set smart_usb_redirect_html5 {
                1,1 "act_vmware_view_policy_1"
                1,0 "act_variable_assign_5"
                0,1 "act_vmware_view_policy_1"
                0,0 "act_active_directory_auth_1"
            }
            append pre_proc_map {
                <CLIENT_TYPE_NEXT_1>    "[iapp_substa client_type_next_1($html5,$disclaimer,$two_factor,$do_smart)]"
                <CLIENT_TYPE_NEXT_2>    "[iapp_substa client_type_next_2($do_smart,$disclaimer,$two_factor)]"
                <ACT_VARIABLE_ASSIGN_2> "[iapp_substa multi_usb_redirect($create_new_multiple_profile,$usb_redirect)]"
                <VMWARE_LOGON_NEXT>     "[iapp_substa vmware_logon_next($do_smart,$two_factor)]"
                <TWO_FACTOR_NEXT>       "[expr { $securid ? "act_securid" : "act_radius" }]"
                <TWO_FACTOR_HTML_NEXT>  "[expr { $securid ? "act_securid_1" : "act_radius_1" }]"
                <TWO_FACTOR_TYPE>       "[expr { $securid ? "rsa-securid" : "radius" }]"
                <TWO_FACTOR_CAPTION>    "[expr { $securid ? "SecureID" : "RADIUS" }]"
                <AUTH_LABEL>            "[expr { $radius ? "RADIUS" : "none" }]"
                <MESSAGE_BOX_NEXT>      "[iapp_substa message_box_next($do_smart,$two_factor)]"
                <AUTH_NEXT>                "[expr { $nat_addr ? "act_variable_assign" : "act_full_resource_assign" }]"
                <AUTH_1_NEXT>              "[expr { $nat_addr ? "act_variable_assign_3" : "act_full_resource_assign_1" }]"
                <AUTH_NEXT_SMART>       "[expr { $do_smart ? "act_variable_assign_4" : "act_active_directory_auth" } ]"
                <AUTH_NEXT_SMART_1>     "[expr { $do_smart ? "act_variable_assign_5" : "act_active_directory_auth_1" } ]"
                <XML_VMWARE>            "[xml_file act_vmware_logon_page logon-page]"
                <XML_LOGON>                "[xml_file act_logon_page logon-page]"
                <XML_MESSAGE>              "[xml_file act_message_box message-box]"
                <SECURID_DROP>             "[expr { $securid && ![iapp_is ::apm__securid_drop ""] ? "$::apm__securid_drop" : "SecurID-AAA-not-specified" }]"
                <RADIUS_AAA_PROFILE>       "server [iapp_substa radius_aaa_server($create_new_radius_profile,$radius)]"
                <NAT_PROXY_IP>             "[expr { $nat_addr ? "$::apm__nat_proxy_addr" : "" }]"
                <HTTP_POOL>                "   [subst $http_pool]"
                <SERVER_SSL>            "[expr { $do_server_ssl ? "enable-serverside-ssl enabled" : "enable-serverside-ssl disabled" }]"
                <SMART_BROKER>               "[iapp_substa remote_desktop_broker($do_smart,$is_v12_0)]"
                <USB_REDIRECT>          "[iapp_substa smart_usb_redirect($do_smart,$usb_redirect)]"
                <USB_REDIRECT_1>        "[iapp_substa smart_usb_redirect_html5($do_smart,$usb_redirect)]"
                <USB_REDIRECT_BROWSER>  "[expr { $usb_redirect ? "act_vmware_view_policy_1" : "act_active_directory_auth_1" }]"
            }
            array set apm_map [string map [subst $pre_proc_map] [array get pcoip_proxy_apm_map]]
        }
    
                # APM policies do not commit in a reliable manner when configured via iApp.
                # This time-bomb script insures that the policy gets committed.
                # See subcase SR1-315233635 for details.
                if { $do_apm && !$do_smart } {
                    catch {
                        set dir [tmsh::pwd]
                        set fn "/var/tmp/iapp_${app}.sh"
                        set fh [open $fn w]
                        puts $fh "sleep 5"
                        puts $fh "tmsh modify apm profile access ${dir}/${app} generation-action increment"
                        close $fh
                        exec chmod 777 $fn
                        exec $fn &
                    } err
                }
            }
            
            
                # VIRTUALS
                # Reusable definitions for base and apm virtuals
                set vs_head "vlans-disabled vlans none \
                             translate-address enabled \
                             translate-port enabled \
                             [iapp_substa snat($do_snat)]"

                set https_vs {
                    [iapp_conf create ltm virtual ${app}_<SUFFIX> \
                    $vs_head <PERSIST> \
                    [expr { $do_apm ? "pool none" : "[subst $http_pool]" }] \
                    ip-protocol tcp \
                    destination [iapp_destination <ADDR> <PORT>] \
                    [iapp_substa firewall_arr($allow_afm,$do_firewall,$new_firewall,tcp)] \
                    [iapp_substa ip_intelligence_arr($allow_afm,$do_firewall,$allow_by_reputation,$is_v11_5,policy)] \
                    $security_logging \
                    rules \{ <IRULES> \} \
                    profiles replace-all-with \{ \
                    [iapp_substa tcp_profiles($advanced,$tcp_same)] \
                    <PROFILES> \
                    [iapp_substa server_ssl_profile($do_apm,$do_server_ssl,$new_server_ssl)] \
                    [iapp_substa http_profile($advanced,$x_forwarded_for)] \
                    [iapp_substa caching_profile($advanced,$do_caching,$new_caching)] \
                    [iapp_substa compression_profile($do_compress,$new_compress)] \
                    [iapp_substa oneconnect_profile($do_oneconnect,$new_oneconnect)] \
                    [iapp_substa analytics($do_analytics,$new_analytics)] \
                    [iapp_substa request_logging($do_logging)] \
                    [iapp_substa ip_intelligence_arr($allow_afm,$do_firewall,$allow_by_reputation,$is_v11_5,profile)] \
                    \}]
                }

                # Redirect virtual
                set do_redirect   [expr { !$advanced || \
                    $::ssl__redirect_to_https eq $::YES_ANSWER }]
                set redirect_port [expr { $advanced && $do_redirect \
                    ? $::ssl__redirect_port : "80" }]
                set redirect_code { [iapp_conf create ltm rule <APP>_redirect_irule {
                when HTTP_REQUEST {
                    HTTP::redirect https://[getfield [HTTP::host] : 1]:<PORT>[HTTP::uri]
                }}]}

                # System redirect iRule supports port 80. Build a custom iRule if not.
                # array key: $redirect_port
                set redirect_irule [expr { $redirect_port eq "80" ? "_sys_https_redirect" : \
                    [subst [string map "
                        <APP>  $app
                        <PORT> $redirect_port
                    " $redirect_code]] }]

                # array key: $do_redirect
                set redirect_vs [expr { $do_redirect \
                                ? { [iapp_conf create ltm virtual ${app}_<SUFFIX> \
                                $vs_head \
                                ip-protocol tcp \
                                destination [iapp_destination <ADDR> <PORT>] \
                                [iapp_substa firewall_arr($allow_afm,$do_firewall,$new_firewall,tcp)] \
                                [iapp_substa ip_intelligence_arr($allow_afm,$do_firewall,$allow_by_reputation,$is_v11_5,policy)] \
                                $security_logging \
                                rules \{ $redirect_irule \} \
                                profiles replace-all-with \{ \
                                [iapp_substa tcp_profiles($advanced,$tcp_same)] \
                                [iapp_substa http_profile($advanced,$x_forwarded_for)] \
                                [iapp_substa ip_intelligence_arr($allow_afm,$do_firewall,$allow_by_reputation,$is_v11_5,profile)] \
                                \}] } \
                                : {} \
                                }]

                # View server virtuals (if pcoip proxy is off)
                # array keys: $do_apm
                array set base_virtuals {
                    0 { [subst [string map {
                            <SUFFIX>   https
                            <ADDR>     $::pool__vs_addr
                            <PORT>     $::pool__vs_port
                            <IRULES>   {[expr { $advanced ? "$::irules__irules" : "" }]}
                            <PERSIST>  "[iapp_substa adv_https_persist_profile($advanced,$default_persist,$no_persist)]"
                            <PROFILES> {[iapp_substa \
                                client_ssl_profile($advanced,$create_new_client_ssl)]}
                        } $https_vs]] \
                        [subst [string map {
                            <SUFFIX>   redirect
                            <ADDR>     $::pool__vs_addr
                            <PORT>     $redirect_port
                        } $redirect_vs]] }
                    1 {}
                }

                # APM virtuals (only if APM is deployed)
                
                
        # array keys: $do_apm,$do_smart
        array set apm_virtuals {
            1,1 {
                [subst [string map {
                    <SUFFIX>   proxy_https
                    <ADDR>     $::pool__vs_addr
                    <PORT>     $::pool__vs_port
                    <IRULES>   { [expr { $advanced ? "$::irules__irules" : "" }]}
                    <PERSIST>  {}
                    <PROFILES> { [iapp_substa  client_ssl_profile($advanced,$create_new_client_ssl)]  [iapp_apm_config apm_map]  [subst $vdi_profile($is_v11_6)]  /Common/ppp /Common/rba /Common/websso  }  } $https_vs]]  [subst [string map {
                    <SUFFIX>       apm_redirect
                    <ADDR>         $::pool__vs_addr
                    <PORT>         80
                } $redirect_vs]]  [iapp_conf create ltm virtual ${app}_pcoip_udp  ip-protocol udp  destination [iapp_destination $::pool__vs_addr 4172]  [iapp_substa firewall_arr($allow_afm,$do_firewall,$new_firewall,udp)]  $security_logging  profiles replace-all-with \{ remotedesktop udp \}  [iapp_substa snat($do_snat)]  vlans-disabled  vlans none]  [iapp_conf create ltm virtual ${app}_idp_vcs_connector  ip-protocol tcp  destination [iapp_destination $::apm__idp_vs_addr 443]  profiles replace-all-with \{ [iapp_substa  http_profile($advanced,$x_forwarded_for)]  [iapp_substa  idp_client_ssl_profile($idp_create_new_client_ssl)]  [iapp_substa  server_ssl_profile(0,$do_server_ssl,$new_server_ssl)]  \}  [iapp_substa snat($do_snat)]  vlans-disabled  vlans none]  }
            1,0    {
                [subst [string map {
                    <SUFFIX>    proxy_https
                    <ADDR>      $::pool__vs_addr
                    <PORT>      $::pool__vs_port
                    <IRULES>    { [expr { $advanced ? "$::irules__irules" : "" } ] }
                    <PERSIST>   {}
                    <PROFILES>  { [iapp_substa  client_ssl_profile($advanced,$create_new_client_ssl)]  [iapp_apm_config apm_map]  [subst $vdi_profile($is_v11_6)]  /Common/ppp /Common/rba /Common/websso  }
                } $https_vs]]  [subst [string map {
                    <SUFFIX>    apm_redirect
                    <ADDR>      $::pool__vs_addr
                    <PORT>      80
                } $redirect_vs]]  [iapp_conf create ltm virtual ${app}_pcoip_udp  ip-protocol udp  destination [iapp_destination $::pool__vs_addr 4172]  [iapp_substa firewall_arr($allow_afm,$do_firewall,$new_firewall,udp)]  $security_logging  profiles replace-all-with \{ remotedesktop udp \}  [iapp_substa snat($do_snat)]  vlans-disabled  vlans none]  }
            0,0    {}
        }
        # array key: $do_internal_vs,$do_smart
        array set apm_internal_vs {
            1,0 {
                [iapp_conf create ltm virtual ${app}_internal_https  ip-protocol tcp  [iapp_substa firewall_arr($allow_afm,$do_firewall,$new_firewall,tcp)]  [iapp_substa ip_intelligence_arr($allow_afm,$do_firewall,$allow_by_reputation,$is_v11_5,policy)]  $security_logging  destination [iapp_destination $::pool__vs_addr_internal $::pool__vs_port]  [subst $http_pool]  $vs_head  [iapp_substa https_persist_profile(0,0)]  profiles replace-all-with \{  [iapp_substa client_ssl_profile($advanced,$create_new_client_ssl)]  [iapp_substa server_ssl_profile(0,$do_server_ssl,$new_server_ssl)]  [iapp_substa http_profile($advanced,$x_forwarded_for)]  [iapp_substa caching_profile($advanced,$do_caching,$new_caching)]  \}]  [subst [string map {
                    <SUFFIX>   internal_redirect
                    <ADDR>     $::pool__vs_addr_internal
                    <PORT>     80
                } $redirect_vs]]
            }
            1,1 {
                [iapp_conf create ltm virtual ${app}_internal_https  ip-protocol tcp  [iapp_substa firewall_arr($allow_afm,$do_firewall,$new_firewall,tcp)]  [iapp_substa ip_intelligence_arr($allow_afm,$do_firewall,$allow_by_reputation,$is_v11_5,policy)]  $security_logging  destination [iapp_destination $::pool__vs_addr_internal $::pool__vs_port]  [subst $http_pool]  $vs_head  [iapp_substa https_persist_profile(0,0)]  profiles none  ]  [subst [string map {
                    <SUFFIX>   internal_redirect
                    <ADDR>     $::pool__vs_addr_internal
                    <PORT>     80
                } $redirect_vs]] }
            0,1 {}
            0,0 {}
        }
        # PCoIP virtuals (only if PCoIP is deployed)
        set do_pcoip [expr { [iapp_is ::pcoip__use_pcoip $::YES_ANSWER] && !$do_apm } ]
        set pcoip_forwarding [expr { $do_pcoip && [iapp_is ::pcoip__forward $::YES_ANSWER] }]
        set ltm_use_html5 [iapp_is ::pcoip__ltm_use_html5 $::YES_ANSWER]
        set do_internal_vs [expr { $do_apm && $::pool__vs_addr_internal != "" }]
        # array keys: $pcoip_forwarding
        array set tcp_virtual {
            1 {
                [iapp_conf create ltm virtual ${app}_tcp  destination [iapp_destination $::pool__vs_addr 4172]  [iapp_substa firewall_arr($allow_afm,$do_firewall,$new_firewall,tcp)]  $security_logging  ip-protocol tcp  [iapp_substa non_https_persist_profile($pcoip_forwarding)]  [subst $pcoip_pool]  profiles replace-all-with \{ [iapp_substa tcp_profiles($advanced,$tcp_same)] \}  [iapp_substa snat($do_snat)]  translate-address enabled  translate-port enabled  vlans-disabled  vlans none]
            }
            0 {
                [iapp_conf create ltm virtual ${app}_tcp_forwarding  destination [iapp_destination $::pcoip__addr 4172]  [iapp_substa firewall_arr($allow_afm,$do_firewall,$new_firewall,tcp)]  $security_logging  ip-forward  ip-protocol tcp  mask $::pcoip__mask  persist none  pool none  profiles replace-all-with \{ fastL4 \}  [iapp_substa snat($do_snat)]  translate-address enabled  translate-port enabled  [iapp_substa vlans($is_vlans_enabled_on,$is_vlans_disabled_on,$empty_vlans)]]
            }
        }
        # array keys: $pcoip_forwarding
        array set udp_virtual {
            1 {
                [iapp_conf create  ltm virtual ${app}_udp  destination [iapp_destination $::pool__vs_addr 4172]  [iapp_substa firewall_arr($allow_afm,$do_firewall,$new_firewall,udp)]  ip-protocol udp  [iapp_substa non_https_persist_profile($pcoip_forwarding)]  $security_logging  [subst $pcoip_pool]  profiles replace-all-with \{ [subst $udp_profile] \}  [iapp_substa snat($do_snat)]  translate-address enabled  translate-port enabled  vlans-disabled  vlans none]
            }
            0 {
                [iapp_conf create  ltm virtual ${app}_udp_forwarding  destination [iapp_destination $::pcoip__addr 4172]  [iapp_substa firewall_arr($allow_afm,$do_firewall,$new_firewall,udp)]  $security_logging  ip-forward  ip-protocol udp  mask $::pcoip__mask  persist none  pool none  profiles replace-all-with \{ fastL4 \}  [iapp_substa snat($do_snat)]  translate-address enabled  translate-port enabled  [iapp_substa vlans($is_vlans_enabled_on,$is_vlans_disabled_on,$empty_vlans)]]
            }
        }
        # array keys: $ltm_use_html5,$pcoip_forwarding
        array set ltm_html5_virtual {
            1,1 {
                [iapp_conf create  ltm virtual ${app}_html5  destination [iapp_destination $::pool__vs_addr 8443]  [iapp_substa firewall_arr($allow_afm,$do_firewall,$new_firewall,tcp)]  $security_logging  ip-protocol tcp  [iapp_substa non_https_persist_profile($pcoip_forwarding)]  [subst $html5_pool]  profiles replace-all-with \{ [iapp_substa tcp_profiles($advanced,$tcp_same)] \}  [iapp_substa snat($do_snat)]  translate-address enabled  translate-port enabled  vlans-disabled  vlans none] }
            1,0 {
                [iapp_conf create  ltm virtual ${app}_html5_forwarding  destination [iapp_destination $::pcoip__addr 8443]  [iapp_substa firewall_arr($allow_afm,$do_firewall,$new_firewall,tcp)]  $security_logging  ip-forward  ip-protocol tcp  mask $::pcoip__mask  persist none  pool none  profiles replace-all-with \{ fastL4 \}  [iapp_substa snat($do_snat)]  translate-address enabled  translate-port enabled  [iapp_substa vlans($is_vlans_enabled_on,$is_vlans_disabled_on,$empty_vlans)]] }
            * {}
        }
        # array keys: $do_pcoip
        array set pcoip_virtuals {
            1 {
                [iapp_substa tcp_virtual($pcoip_forwarding)]
                [iapp_substa udp_virtual($pcoip_forwarding)]
                [iapp_substa ltm_html5_virtual($ltm_use_html5,$pcoip_forwarding)] }
            0 {}
        }
        # idp cert setup
        if { !$idp_create_new_client_ssl && $do_smart } {
            set use_profile_cert     "[tmsh::list ltm profile client-ssl $::apm__idp_client_ssl_profile cert]"
            set use_profile_cert_first "[expr {[string first cert ${use_profile_cert}] + 4}]"
            set use_profile_cert_last "[expr {[string last \} ${use_profile_cert}] -1}]"
            # Even out bracket for meta assembler \{
            set use_profile_cert_clean "[string range ${use_profile_cert} ${use_profile_cert_first} ${use_profile_cert_last}]"
            set use_profile_key     "[tmsh::list ltm profile client-ssl $::apm__idp_client_ssl_profile key]"
            set use_profile_key_first "[expr {[string first key ${use_profile_key}] + 3}]"
            set use_profile_key_last "[expr {[string last \} ${use_profile_key}] -1}]"
            # Even out bracket for meta assembler \{
            set use_profile_key_clean "[string range ${use_profile_key} ${use_profile_key_first} ${use_profile_key_last}]"
        }
        # idp hostname table setup
        if { $do_smart } {
            set fqdn_sp ""
            set i 0
            foreach row [join $::apm__vcs_fqdn] {
                # Skip invalid table rows.
                if { [llength [join $row]] %2 == 1 } {
                    continue
                }
                # Import APL table into an array for processing.
                array unset columns
                array set columns [join $row]
                set fqdn_sp $columns(fqdn)
                if { $i eq 0 } {
                    set sp_connector "binding paos is-default true uri \"https://$::fqdn_sp\" \}"
                }
                if { $i > 0 } {
                    append sp_connector "\{ binding paos index $i uri \"https://$::fqdn_sp\" \}"
                }
                incr i
            }
        }
        # array keys: $do_smart
        array set idp {
            1 {
                [iapp_conf create apm sso saml-resource ${app}_view  publish-on-webtop false  sso-config-saml [iapp_conf create apm sso saml ${app}_vcs  attributes \{ \{ multi-values \{ false \} name disclaimer \} \}  entity-id https://$::apm__idp_host/idp  idp-host $::apm__idp_host  subject-type persistent  subject-value \"%\{session.custom.certupn\}\"  saml-profiles replace-all-with \{ ecp \}  idp-certificate [expr { $idp_create_new_client_ssl ? "$::apm__idp_cert" : "$::use_profile_cert_clean" }]  idp-signkey [expr { $idp_create_new_client_ssl ? "$::apm__idp_key" : "$::use_profile_key_clean" }]  sp-connectors replace-all-with \{ [iapp_conf create apm sso saml-sp-connector ${app}_vcs_sp  assertion-consumer-services \{ \{ $sp_connector  \}  entity-id \"https://$::apm__idp_host/SAML/metadata/sp.xml\"  want-response-signed true ] \} ]]
            }
            0 {}
        }
    
                
                # build all
                subst $base_virtuals($do_apm)
                
        subst $apm_virtuals($do_apm,$do_smart)
        subst $apm_internal_vs($do_internal_vs,$do_smart)
        subst $pcoip_virtuals($do_pcoip)
        iapp_substa idp($do_smart)
        if { $do_smart } {
            # START EMBEDDED ICALL SCRIPT
            # Exports SAML META data required to build VCS iRule
            # iRule contains approprate xml response for VCS SAML authentication setup
            set icall_script_vcs_tmpl {
                set app <APP>
                tmsh::log "Starting iCall Script for $app"
                tmsh::log "Disabling strict updates"
                tmsh::modify sys application service ${app}.app/${app} strict-updates disabled
                tmsh::log "Making iCall handler inactive, only want script to run once"
                tmsh::modify sys icall handler periodic ${app}.app/vcs_irule_create status inactive
                tmsh::log "Generating meta data file used to create VCS XML iRule"
                tmsh::modify apm sso saml ${app}.app/${app}_vcs export-metadata no-signing metadata-file /var/tmp/${app}_vcs_meta
                set i 1
                while { $i < 4 } {
                    if { [file exists /var/tmp/${app}_vcs_meta] == 1 } {
                        set i 10
                    } else {
                        tmsh::log "${app}_vcs_meta file not present, waiting 5 seconds and trying again."
                        after 5000
                        set i [expr {$i + 1}]
                        tmsh::log "${app}_vcs_meta check for file, Attempt:${i}."
                    }
                }
                if { $i == 10 } {
                    tmsh::log "${app}_vcs_meta file exists, creating VCS XML iRule"
                } else {
                    tmsh::log "${app}_vcs_meta file not present, exiting script"
                    exit 1
                }
                set fn_vcs_meta "/var/tmp/${app}_vcs_meta"
                set fh_vcs_meta [open $fn_vcs_meta r]
                set meta_collect [read $fh_vcs_meta]
                set first_a [string first <?xml ${meta_collect}]
                set first_b [expr {[string last <KeyDescriptor> ${meta_collect}] -1 }]
                set meta_first [string range $meta_collect $first_a $first_b]
                set key_a [string first <KeyDescriptor $meta_collect]
                set key_b [expr {[string last </KeyDescriptor> $meta_collect] +15}]
                set meta_keydescriptor [string range $meta_collect $key_a $key_b]
                set end_a [string first <SingleLogoutService $meta_collect]
                set end_b [expr {[string last </EntityDescriptor> $meta_collect] +18}]
                set meta_end [string range $meta_collect $end_a $end_b]
                set meta_keydescriptor_signing [string map {<KeyDescriptor> {<KeyDescriptor use ="signing">}} ${meta_keydescriptor}]
                set meta_keydescriptor_encry [string map {<KeyDescriptor> {<KeyDescriptor use ="encryption">}} ${meta_keydescriptor}]
                set meta_artifact "<ArtifactResolutionService Binding=\"urn:oasis:names:tc:SAML:2.0:bindings:SOAP\" Location=\"https://<IDPADDR>:443/saml/idp/profile/soap/ars\" index=\"0\" isDefault=\"true\">\n</ArtifactResolutionService>\n"
                append meta_final $meta_first
                append meta_final $meta_keydescriptor_signing
                append meta_final "\n"
                append meta_final $meta_keydescriptor_encry
                append meta_final "\n"
                append meta_final $meta_artifact
                append meta_final $meta_end
                set smart_irule ""
                append smart_irule "when HTTP_REQUEST \{\n"
                append smart_irule "if \{ \[HTTP::path] contains \"/SAAS/API/1.0/GET/metadata/\" and \[HTTP::method] equals \"GET\" \} \{\n"
                append smart_irule "HTTP::respond 200 content \{$meta_final\n"
                append smart_irule "\}\n"
                append smart_irule "\}\n"
                append smart_irule "\}\n"
                tmsh::log "Removing irules from virtual and deleating existing iRule"
                tmsh::modify ltm virtual ${app}.app/${app}_idp_vcs_connector rules none
                catch {
                    tmsh::delete ltm rule ${app}.app/${app}_vcs_saml
                } err
                tmsh::log "Creating iRule: $smart_irule"
                tmsh::create ltm rule ${app}.app/${app}_vcs_saml app-service /Common/${app}.app/${app} ${smart_irule}
                tmsh::log "Adding iRule ${app}.app/${app}_vcs_saml onto virtual server ${app}.app/${app}_vcs_saml"
                tmsh::modify ltm virtual ${app}.app/${app}_idp_vcs_connector rules \{ ${app}.app/${app}_vcs_saml \}
                after 1000
                set dir [tmsh::pwd]
                tmsh::log "Enabling strict updates"
                tmsh::modify sys application service ${app}.app/${app} strict-updates enabled
                after 2000
                tmsh::log "Applying Access policy"
                tmsh::modify apm profile access ${dir}/${app}.app/${app} generation-action increment
                close $fh_vcs_meta
                tmsh::log "deleting /var/tmp/${app}_vcs_meta"
                file delete "/var/tmp/${app}_vcs_meta"
                tmsh::log "iCall Script Complete"

            }
            # END iCall Script
            # used to fill in variables within iCall script
            set icall_script_vcs_src [string map "<APP> $app <IDPADDR> $apm__idp_vs_addr" $icall_script_vcs_tmpl]
            iapp_conf create sys icall script vcs_irule_create  definition \{ $icall_script_vcs_src \}
            iapp_conf create sys icall handler periodic vcs_irule_create  interval 15 script vcs_irule_create status active
        }
    
                
                

                iapp_template stop
            }
            presentation {
                define choice lb_method display "xxlarge" tcl {
                    if { [string first ltm_lb_least_conn [tmsh::show sys license detail]] != -1 } {
                        set choices "Least Connections (member)\tleast-connections-member\nLeast Connections (node)\tleast-connections-node\nLeast Sessions\tleast-sessions\nDynamic Ratio (member)\tdynamic-ratio-member\nDynamic Ratio (node)\tdynamic-ratio-node\nFastest (application)\tfastest-app-response\nFastest (node)\tfastest-node\nObserved (member)\tobserved-member\nObserved (node)\tobserved-node\nPredictive (member)\tpredictive-member\nPredictive (node)\tpredictive-node\nRound Robin\tround-robin\nRatio (member)\tratio-member\nRatio (node)\tratio-node\nRatio (session)\tratio-session\nRatio Least Connections (member)\tratio-least-connections-member\nRatio Least Connections (node)\tratio-least-connections-node\nWeighted Least Connections (member)\tweighted-least-connections-member"
                    } else {
                        set choices "Round Robin\tround-robin\nRatio (member)\tratio-member\nRatio (node)\tratio-node"
                    }
                    return $choices
                }
                section intro {
                    optional ( "HIDE" == "THIS" ) {
                        choice analytics_provisioned tcl { expr { [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_get_provisioned avr] ? "yes":"no" }}
                        choice apm_provisioned       tcl { expr { [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_get_provisioned apm] ? "yes":"no" }}
                        choice afm_provisioned       tcl { expr { [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_get_provisioned afm] ? "yes":"no" }}
                        choice is_v11_4              tcl { expr { [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_tmos_version >= 11.4] ? "yes" : "no" }}
                        choice is_v11_5              tcl { expr { [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_tmos_version >= 11.5] ? "yes" : "no" }}
                        choice is_v11_6              tcl { expr { [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_tmos_version >= 11.5] ? "yes" : "no" }}
                        choice is_v12_0              tcl { expr { [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_tmos_version >= 12.0] ? "yes" : "no" }}
                        choice is_v12_1              tcl { expr { [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_tmos_version >= 12.1] ? "yes" : "no" }}
                        choice bash_disabled         tcl { expr { [expr { [string first true [tmsh::list sys db systemauth.disablebash value]] != -1}] ? "yes" : "no" }}
                    }

                    
        optional ( intro.bash_disabled == "yes" ) {
            message non_bash_warning "You have opened this iApp while Bash is disabled. You can not run this iApp without Bash enabled."
        }
        optional ( intro.bash_disabled == "no") {
        message hello "Use this template to configure availability, encryption, and remote access for View. This template configures the BIG-IP Local Traffic Manager (LTM) module as well as Access Policy Manager (APM) for environments using Security Servers in conjunction with Connection Servers or Connection Servers only."
        message check_for_updates "Ensure you are using the most recent template before continuing. Check for newer versions online at https://support.f5.com/kb/en-us/solutions/public/15000/000/sol15041.html or DevCentral: https://devcentral.f5.com/wiki/iApp.VMware-Applications.ashx."
        message software_support "This iApp template supports Horizon View 5.2, 5.3, 6.0*, 6.1*, 6.1.1*, 6.2*, 6.2.2*, and 7.0*."
        message software_support2 "*BIG-IP APM v11.6 HF-3 and earlier does not support publishing and providing remote connectivity to the RDS hosted applications feature in Horizon View 6.0; however v11.6 HF-4 or later enables the View Remote App publishing feature. You must install 11.6 HF5 for Horizon View HTML5 client support in Horizon View 6.1. BIG-IP APM v12.0 requires HF1 to support the Horizon View HTML5 client in Horizon View 6.1.1 or later. BIG-IP APM does not support proxying the VMware View RDP protocol. You must be using BIG-IP 11.6 HF-6 (Hotfix-BIGIP-11.6.0.6.0.442-HF6) or later in the 11.x branch for Horizon View 6.1.1 and 6.2. BIG-IP APM does not currently support the Linux Virtual Desktop feature introduced in v6.1.1. Please use the solution: https://support.f5.com/kb/en-us/solutions/public/k/84/sol84958121.html to enable APM support for VMware Horizon View 7.0. See deployment guide for complete product support information."
        message prereqs_1 "Before using this iApp you must ensure that the following prerequisites are met:"
        message prereqs_2 "The View environment must be fully configured and tested to verify clients are able to access the available Desktops via each Connection or Security Server that will be a part of this deployment."
        message prereqs_3 "Ensure that your Active Directory server is properly configured and all View Clients have the appropriate credentials to access the View environment."
        message prereqs_4 "Ensure that DNS and NTP servers are properly configured on the BIG-IP system. See the deployment guide or BIG-IP documentation for instructions."
        message prereqs_5 "If you plan on using this template to configure the BIG-IP system for processing encrypted web traffic (HTTPS), you need to import an SSL certificate and key that correspond to all fully-qualified DNS names that you are using for the HTTPS traffic. Importing SSL certificates and keys is not a part of this template; see System > File Management >> SSL Certificate List."
        optional ( apm_provisioned == "no" ) {
            message apm_opportunity "You do not currently have the BIG-IP Access Policy Module (APM) provisioned on the BIG-IP system. Provisioning APM provides secure network access (VPN) to your View environment."
        }
        optional ( analytics_provisioned == "no" ) {
            message analytics_opportunity "You do not currently have the BIG-IP Application Visibility Reporting Module (AVR) provisioned on the BIG-IP system. Provisioning AVR (also called Analytics) provides rich application statistics and reporting for your application deployments."
        }
        optional ( apm_provisioned == "yes" && is_v11_4 == "no" ) {
            message v11_4_opportunity "Upgrading your BIG-IP system to v11.4 or a newer TMOS version will allow you to configure and use Native PCoIP Proxy, optionally use two-factor authentication, and Support HTML 5 Clients."
        }
        }
    
                }
                
                optional ( intro.bash_disabled == "no" ) {
                section options {
                    choice display_help display "xxlarge" default "show" {
                        "Show inline help text" => "show"  ,
                        "Do not show inline help text" => "hide"
                    }
                    optional ( options.display_help == "show" ) {
                        message display_help_inline_help "    This template offers extensive inline assistance, notes, and configuration tips. We strongly recommend reading the inline help presented in the template until you are familiar with the functionality and implications of the deployment options. Important notes are always shown no matter which selection you make here."
                    }
                    
        choice advanced_mode display "xxlarge" default "no" {
            "Basic - use F5's recommended settings" => "no"  ,
            "Advanced - configure advanced options"    => "yes"
        }
        optional ( options.display_help == "show" && options.advanced_mode != "upgrade" ) {
            message conf_mode_inline_help "This template supports two configuration modes. Basic mode automatically configures many options, such as load balancing method or profile types, on the BIG-IP system using F5 recommended settings without user intervention. Advanced mode allows you to review and edit the F5 recommended settings before configuring the system."
        }
    
                }
                optional ( intro.apm_provisioned == "yes" ) {
                    section apm {
                        
        optional ( "HIDE" == "THIS" ) {
            choice use_unp    { "no" }
        }
        choice use_apm display "xxlarge" default "yes" {
            "No, do not deploy BIG-IP Access Policy Manager" => "no"  ,
            "Yes, deploy BIG-IP Access Policy Manager"       => "yes"
        }
        message use_apm_inline_note "You can use the BIG-IP Access Policy Manager (APM) as a full PCoIP secure gateway proxy, or a DTLS Network Access VPN. Deploying BIG-IP APM as a full PCoIP proxy requires the View Clients use Horizon View 5.2 or later and the BIG-IP system must be running version 11.4 or later."
        optional ( options.display_help == "show" ) {
            message use_apm_inline_help "You must have fully licensed the BIG-IP APM to use the APM features in this template."
        }
        optional ( use_apm == "yes" ) {
            optional ( intro.is_v11_4 == "yes" ) {
                choice use_html5 display "xxlarge" default "no" {
                    "Yes, support HTML 5 View clientless browser connections" => "yes"  ,
                    "No, support only View Client connections" => "no"
                }
                optional ( options.display_help == "show" ) {
                    message use_html5_inline_help "Choose Yes to enable support for both HTML 5 clientless browser connections and View Client connections to the Virtual Desktops. Choose No if you only need to support View Client connections and do not need to support browser-based connections, including the View HTML 5 client."
                }
                optional ( intro.is_v12_1 == "yes" ) {
                    choice use_usb_redirection display "xxlarge" default "no" {
                        "Yes, support USB redirection" => "yes"  ,
                        "No, do not support USB redirection" => "no"
                    }
                    optional ( options.display_help == "show" ) {
                        message use_usb_redirection_inline_help "Choose Yes to enable support for USB redirection. Choose No if you would like to disable USB redirection."
                    }
                }
                optional ( intro.is_v12_0 == "yes" ) {
                    choice use_smartcard display "xxlarge" default "no" {
                        "Yes, support smart card authentication" => "yes"  ,
                        "No, do not support smart card authentication" => "no"
                    }
                    optional ( options.display_help == "show" ) {
                    message use_smartcard_inline_help "Select whether your Horizon clients use smart cards to authenticate with the Horizon View implementation.  If you select Yes, the iApp configures the BIG-IP APM to authenticate to the Horizon View Connection servers using smart cards. In this scenario, users must enter their PIN twice, once as they authenticate to APM (which will authenticate with VCS using SAML assertion token), and once as the Horizon View application or desktop is launched."
                }
                }
                optional ( use_smartcard == "yes" && intro.is_v12_0 == "yes" ) {
                    string idp_vs_addr display "xxlarge" validator "IPAddress" required
                    optional (options.display_help == "show") {
                        message idp_vs_addr_inline_help "Type the IP address for SAML IDP services which will be used by View servers to validate authentication."
                    }
                    string idp_host display "xxlarge" validator "fqdn" required
                    optional (options.display_help == "show") {
                        message idp_host_inline_help "Type the FQDN which is used to resolve to the IP address you entered for SAML IDP services."
                    }
                    table vcs_fqdn {
                        string fqdn display "xlarge" validator "fqdn" required
                    }
                    optional (options.display_help == "show") {
                        message vcs_fqdn_inline_help "Type the FQDN(s) of the View Connection servers you want to send SAML assertions.  Click Add to include more hostnames."
                    }
                    choice idp_client_ssl_profile display "xxlarge" default "/#default#" tcl {
                        set ::choices "Create a new Client SSL profile for IDP\t/#default#\n[tmsh::run_proc f5.iapp.1.5.1.cli:iapp_get_items ltm profile client-ssl]"
                        return [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_safe_display ::choices]
                    }
                    optional (options.display_help == "show") {
                        message idp_sslprofile_inline_help "If you have already created an Client SSL profile that includes the appropriate certificate and key, you can select it from the list.  Otherwise, the iApp creates a new Client SSL profile. "
                    }
                    optional ( idp_client_ssl_profile == "/#default#" ) {
                        choice idp_cert default "/Common/default.crt" display "xxlarge" tcl {
                            set ::choices [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_get_items -norecursive -filter NAME !~ ca-bundle.crt|f5-irule.crt sys file ssl-cert]
                            return [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_safe_display ::choices]
                        }
                        optional (options.display_help == "show") {
                            message idp_sslcert_inline_help "To establish encrypted communication, a client and server negotiate security parameters that are used for the session. As part of this handshake, a certificate is provided by the server to the client to identify itself. The client can then validate the certificate with an authority for authenticity before sending data. When the BIG-IP system is decrypting communication between the client and server, an SSL certificate and key pair for each fully-qualified DNS name related to this application instance must be configured on the system."
                            message idp_sslcert_inline_help2 "Select the SSL certificate you imported for this deployment.  Importing certificates and keys is not a part of this template, see Local Traffic >> SSL Certificate List. To select any new certificates and keys you import, you need to restart or reconfigure this template."
                        }
                        choice idp_key  default "/Common/default.key" display "xxlarge" tcl {
                            
                            set ::choices [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_get_items -norecursive -filter security-type ne "password" sys file ssl-key]
                            return [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_safe_display ::choices]
                        }
                        optional (options.display_help == "show") {
                            message idp_key_inline_help "Select the associated SSL key."
                        }
                        optional ( idp_cert == "/Common/default.crt" || idp_key == "/Common/default.key" ) {
                            message idp_ssl_warn_1 "You have selected a default BIG-IP certificate and/or key. This application service configuration is incomplete and will not be secure until you import and assign a trusted certificate and key that are valid for all fully qualified domain names used to access the application. See Local Traffic >> SSL Certificate List for importing certificates and keys. To select any new certificates and keys you import, you need to restart or reconfigure this template."
                        }
                    }
                }
                optional ( use_smartcard == "no" ) {
                    choice use_securid display "xxlarge" default "no" {
                        "Yes, support SecurID with AD two-factor authentication" => "yes"  ,
                        "Yes, support RADIUS with AD two-factor authentication" => "radius"  ,
                        "No, do not support SecurID or RADIUS two-factor authentication" => "no"
                    }
                    optional ( use_securid == "yes" ) {
                        message use_securid_inline_note "You must have an existing SecurID AAA Server object on this BIG-IP APM to support RSA SecurID two-factor authentication."
                    }
                    optional ( options.display_help == "show" ) {
                        message use_securid_inline_help "Choosing 'Yes, support SecurID with AD two-factor authentication' enables support for two-factor authentication using SecurID. You must have already created a SecurID AAA Server object prior to configuring this portion of the iApp in order to select this option, as creating an AAA Server object for SecurID is not a part of this template (see Access Policy > AAA Servers > SecurID). Choosing 'Yes, support RADIUS with AD two-factor authentication' enables support for two-factor authentication using RADIUS. Choosing not to support either method disables the ability to authenticate via two-factor authentication."
                   }
                    optional ( use_securid == "yes" ) {
                        choice securid_drop display "xxlarge" default "no" tcl {
                            set ::choices {}
                            if { [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_tmos_version >= 11.4] } {
                                catch { set ::choices [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_get_items apm aaa securid] }
                            }
                            return [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_safe_display ::choices]
                        }
                        optional ( options.display_help == "show" ) {
                            message securid_drop_inline_help "Select the SecurID AAA Server object you created for this implementation.  If this list is empty, you must exit the template and then manually create a BIG-IP APM AAA Server object with a Type of SecurID."
                        }
                        optional ( use_html5 == "yes" ) {
                            string use_securid_field3 display "xxlarge" default "Passcode"
                            optional ( options.display_help == "show" ) {
                                message use_securid_field3_inline_help "There are three logon form fields when using two-factor authentication: User Name and Password, which are used to authenticate the user against Active Directory, and a third field which is used to pass the user's SecureID pin. Specify the label you want the BIG-IP system to give this field."
                            }
                        }
                    }
                    optional ( use_securid == "radius" ) {
                        choice radius_aaa_profile display "xxlarge" default "/#create_new#" tcl {
                            set ::choices "Create a new RADIUS AAA Server object\t/#create_new#\n[tmsh::run_proc f5.iapp.1.5.1.cli:iapp_get_items -nocomplain apm aaa radius]"
                            return [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_safe_display ::choices]
                        }
                        optional ( options.display_help == "show" ) {
                            message radius_aaa_profile_inline_help "Select 'Create a new RADIUS AAA Server object' if you want the system to create a new BIG-IP APM AAA server. If you have manually created a custom RADIUS AAA server object for this implementation, you can select it from the list."
                        }

                        optional ( radius_aaa_profile == "/#create_new#" ) {
                            table radius_server {
                                string addr display "xlarge" required validator "IpAddress"
                            }
                            optional ( options.display_help == "show" ) {
                                message radius_server_inline_help "Specify the IP address of each of your RADIUS servers used for this View environment. Click the Add button for additional rows."
                            }
                            string auth_service_port display "xxlarge" required default "1812"
                            optional ( options.display_help == "show" ) {
                                message auth_service_port_inline_help "Specify the authentication port number of your AAA RADIUS servers. The default is 1812."
                            }
                            password radius_secret display "xxlarge" required
                            optional ( options.display_help == "show" ) {
                                message radius_secret_inline_help "Specify the shared secret password set on your AAA RADIUS servers."
                            }
                            string radius_nas_ip display "xxlarge" validator "IpAddress"
                            optional ( options.display_help == "show" ) {
                                message radius_nas_ip_inline_help "Specify an IP address to use as RADIUS attribute 4, NAS-IP-address, that you can configure without changing the source IP address in the IP header of the RADIUS packets. This property is useful in situations where you are using a cluster of NAS to be recognized as a single RADIUS client. This property is optional."
                            }
                            choice radius_monitor display "xxlarge" default "/#create_new#" tcl {
                                set ::choices "Yes, create a new RADIUS monitor\t/#create_new#\nYes, create a simple ICMP monitor\t/#use_icmp#\nNo, do not monitor RADIUS\t/#do_not_use#\n[tmsh::run_proc f5.iapp.1.5.1.cli:iapp_get_items -filter NAME != "radius" ltm monitor radius]"
                                return [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_safe_display ::choices]
                            }
                            optional ( options.display_help == "show" ) {
                                message radius_monitor_inline_help "This monitor is for the RADIUS servers you entered in the APM RADIUS Authentication section, and is attached to the RADIUS pool the template creates. Specify whether you want to create a new RADIUS monitor, use a simple ICMP/ping monitor, or choose an existing monitor. The remaining questions in this section are all related to the RADIUS monitor."
                            }
                            optional ( radius_monitor == "/#create_new#" ) {
                                string radius_monitor_user display "xxlarge" required
                                optional ( options.display_help == "show" ) {
                                    message radius_monitor_user_inline_help "Specify a RADIUS user name. You should select an account that does not expire or has a mandatory password change. Note, your RADIUS servers will become unavailable if this account is locked out or deleted for any reason."
                                }
                                password radius_monitor_password display "xxlarge" required
                                optional ( options.display_help == "show" ) {
                                    message radius_monitor_password_inline_help "Type the password associated with the user you just entered."
                                    }

                                optional ( options.advanced_mode == "yes" ) {
                                    string radius_monitor_interval display "medium" required default "30" validator "NonNegativeNumber"
                                    optional ( options.display_help == "show" ) {
                                        message radius_monitor_interval_inline_help "This is the duration, in seconds, of a single monitor cycle. At this interval, the system checks the health of each server configured in the pool."
                                    }
                                }
                            }
                        }
                        optional ( use_html5 == "yes" ) {
                            string use_radius_field3 display "xxlarge" default "Radius Password"
                            optional ( options.display_help == "show" ) {
                                message use_radius_field3_inline_help "There are three logon form fields when using two-factor authentication: User Name and Password, which are used to authenticate the user against Active Directory, and a third field which is used to pass the user's RADIUS password. Specify the label you want the BIG-IP system to give this field."
                            }
                        }
                    }
                }
                optional ( use_smartcard == "no" ) {
                    choice use_disclaimer display "xxlarge" default "no" {
                        "Yes, add a message during logon" => "yes"  ,
                        "No, do not add a message during logon" => "no"
                    }
                    optional ( options.display_help == "show" ) {
                        message disclaimer_message_inline_help "The BIG-IP system can display a message to users during the logon process.  The BIG-IP APM refers to this as a 'Disclaimer' message. Select whether you want to display a disclaimer message to users during logon."
                    }
                    optional ( use_disclaimer == "yes" ) {
                        string disclaimer_text display "xxlarge"
                        optional ( options.display_help == "show" ) {
                            message disclaimer_text_inline_help "The disclaimer message text you enter here is displayed to View Clients during logon."
                        }
                    }
                }
                string nat_proxy_addr display "xxlarge" validator "IpAddress"
                optional ( options.display_help == "show" ) {
                    message nat_proxy_addr_inline_help "You may not be translating your public address, however, if you are, enter the public NAT IP address View Clients resolve to for initial connections."
                }
            }
        }
    
                        optional ( use_apm == "yes" ) {
                            optional ( options.advanced_mode == "yes" && intro.is_v11_5 == "yes" && use_smartcard == "no" ) {
                                choice multiple_domain display "xxlarge" default "no" {
                                    "Yes, support multiple Active Directory domains" => "yes"  ,
                                    "No, my View environment uses a single Active Directory domain" => "no"
                                }
                                optional (options.display_help == "show") {
                                    message multiple_domain_inline_help "Select Yes your environment requires support for authenticating to multiple Active Directory domains. NOTE: When using multiple domains, you must preconfigure an AAA Active Directory profile for each domain users will authenticate against."
                                }
                                optional (multiple_domain == "yes") {
                                    table multiple {
                                        choice aaa_ad_servers display "xxlarge" tcl {
                                            set ::choices [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_get_items -nocomplain apm aaa active-directory]
                                            return [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_safe_display ::choices]
                                        }
                                    }
                                    optional (options.display_help == "show") {
                                        message multiple_aaa_ad_servers_inline_help "Select the Active Directory AAA Server objects you manually created to use in this deployment. Make sure to include each domain you intend users to authenticate against."
                                    }
                                }
                            }
                            optional ( use_smartcard == "no" ) {
                                string netbios_name display "xxlarge" required
                                optional ( intro.is_v11_4 == "yes" && use_apm == "yes" ) {
                                    optional ( options.display_help == "show" ) {
                                        optional ( use_html5 == "yes" && multiple_domain == "no" ) {
                                            message netbios_name_inline_help_pcoip_html5 "Specify the NetBIOS domain for this View environment. For example, if the FQDN is 'my.example.com', the NetBIOS domain is 'my'."
                                        }
                                        optional ( use_html5 == "no" || multiple_domain == "yes" ) {
                                            message netbios_name_inline_help_pcoip "Specify the NetBIOS domains for this View environment. For example, if the FQDN is 'my.example.com', the NetBIOS domain is 'my'. If you have multiple domains, enter each domain separated by a space."
                                        }
                                    }
                                }
                                optional ( intro.is_v11_4 == "no" || use_apm == "no" ) {
                                    optional ( options.display_help == "show" ) {
                                        message netbios_name_inline_help "Specify the NetBIOS domain for this View environment.  For example, if the FQDN is 'my.example.com', the NetBIOS domain is 'my'."
                                    }
                                }
                            }
                            optional (use_smartcard == "no" && (multiple_domain == "no" || options.advanced_mode == "no")) {
                                choice aaa_profile display "xxlarge" default "/#create_new#" tcl {
                                   set ::choices "Create a new AAA Server object\t/#create_new#\n[tmsh::run_proc f5.iapp.1.5.1.cli:iapp_get_items -nocomplain apm aaa active-directory]"
                                   return [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_safe_display ::choices]
                                }
                                optional ( options.display_help == "show" ) {
                                    message aaa_profile_help "Choose whether you want the template to create a new AAA Server object for your BIG-IP APM implementation or if you want to use an existing object. The AAA Server contains information about your Active Directory deployment. Unless you have created a custom AAA server specifically for this implementation, we recommend allowing the iApp to create a new one."
                                }
                                optional ( aaa_profile == "/#create_new#" ) {
                                    table active_directory_server {
                                        string host display "xlarge" required validator "FQDN"
                                        string addr display "large" required validator "IpAddress"
                                    }
                                    optional ( options.display_help == "show" ) {
                                        message active_directory_server_inline_help "Specify each of your Active Directory domain controllers, both FQDN and associated IP address, used for this View environment. Click the Add button for additional rows."
                                    }
                                    string netbios_domain display "xxlarge" required
                                    optional ( options.display_help == "show" ) {
                                        message netbios_domain_inline_help "Specify the fully qualified domain name (FQDN) used for this View environment, for example, my.example.com"
                                    }
                                    choice credentials display "xxlarge" default "no" {
                                        "No, anonymous binding is allowed"         => "no"  ,
                                        "Yes, credentials are required for binding" => "yes"
                                    }
                                    optional ( options.display_help == "show" ) {
                                        message binding_inline_help "Choose whether your Active Directory implementation allows anonymous binding or not. If it does not, you must provide a user name and password with administrative permissions."
                                    }
                                    optional ( credentials == "yes" ) {
                                        string active_directory_username display "xxlarge" required
                                        optional ( options.display_help == "show" ) {
                                             message ad_username_inline_help "Specify the user name of an Active Directory account that has adminstrative permissions."
                                        }
                                        password active_directory_password display "xxlarge" required
                                        optional ( options.display_help == "show" ) {
                                            message ad_password_inline_help "Specify the password associated with the user account."
                                        }
                                    }
                                    choice ad_monitor display "xxlarge" default "/#create_new#" tcl {
                                        set ::choices "Yes, create a new Active Directory monitor\t/#create_new#\nYes, create a simple ICMP monitor\t/#use_icmp#\nNo, do not monitor Active Directory\t/#do_not_use#\n[tmsh::run_proc f5.iapp.1.5.1.cli:iapp_get_items -filter NAME != "ldap" ltm monitor ldap]"
                                        return [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_safe_display ::choices]
                                    }
                                    optional ( options.display_help == "show" ) {
                                        message ad_monitor_inline_help "This monitor is for the Active Directory servers you entered in the APM Authentication section, and is attached to the Active Directory pool the template will create. Specify whether you want to create a new Active Directory monitor, use a simple ICMP/ping monitor, or choose an existing monitor. The remaining questions in this section are all related to the Active Directory monitor."
                                    }
                                    optional ( ad_monitor == "/#create_new#" ) {
                                        string ad_monitor_user display "xxlarge" required
                                        optional ( options.display_help == "show" ) {
                                            message ad_monitor_user_inline_help "Specify an Active Directory user name. You should select an account that does not expire or has a mandatory password change. Note, your Active Directory servers will become unavailable if this account is locked out or deleted for any reason."
                                        }
                                        password ad_monitor_password display "xxlarge" required
                                        optional ( options.display_help == "show" ) {
                                            message ad_monitor_password_inline_help "Passwords you specify for monitors are stored in clear text on the BIG-IP system."
                                        }
                                        string ad_monitor_tree display "xxlarge" required
                                        optional ( options.display_help == "show" ) {
                                            message ad_monitor_tree_inline_help "Enter the LDAP tree for the user name you provided. ADSI editor, an administration tool for Active Directory LDAP administration, is useful for determining the correct LDAP tree value. Here is an example: user name is user1 which is in the organizational unit 'View Users' and is in the domain 'my.example.com'. For this example you would enter the following: ou=View Users,dc=my, dc=example, dc=com."
                                        }
                                        choice ad_monitor_secure display "xxlarge" default "none" {
                                            "No, a secure protocol is not required" => "none"  ,
                                            "Yes, SSL communication is required"  => "ssl"  ,
                                            "Yes, TLS communication is required"  => "tls"
                                        }
                                        optional ( options.display_help == "show" ) {
                                            message ad_monitor_secure_inline_help "Specifies that the system does not use a security protocol for Active Directory communication. SSL: Specifies that the system uses the SSL protocol for AD communications. TLS: Specifies that the system uses the TLS protocol for AD communications."
                                        }
                                        optional ( options.advanced_mode == "yes" ) {
                                            string ad_monitor_interval display "medium" required default "10" validator "NonNegativeNumber"
                                            optional ( options.display_help == "show" ) {
                                                message ad_monitor_interval_inline_help "This is the duration, in seconds, of a single monitor cycle. At this interval, the system checks the health of each Active Directory server configured in the pool."
                                            }
                                            optional ( ad_monitor_secure != "ssl" ) {
                                                string ad_monitor_port display "medium" required default "389" validator "PortNumber"
                                            }
                                            optional ( ad_monitor_secure == "ssl" ) {
                                                string ad_monitor_port_secure display "medium" required default "636" validator "PortNumber"
                                            }
                                            optional ( options.display_help == "show" ) {
                                                message ad_monitor_port_inline_help "Specify the service port you are using to communicate with your Active Directory servers. The default is 389 for LDAP and 636 for LDAPS."
                                            }
                                        }
                                    }
                                }
                            }
                            optional ( intro.is_v12_0 == "yes") {
                                choice logging display "xxlarge" default "/Common/default-log-setting" tcl {
                                    set ::choices "Do not specify a logging profile for the APM profile\t/#do_not_use#\n[tmsh::run_proc f5.iapp.1.5.1.cli:iapp_get_items -nocomplain apm log-setting]"
                                    return [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_safe_display ::choices]
                                }
                                optional (options.display_help == "show") {
                                    message logging_inline_help "Select the APM logging profile to use for the Access Policy created by this iApp deployment."
                                }
                            }
                        }
                    }
                }
                
        optional ( intro.afm_provisioned == "yes" && intro.is_v11_4 == "yes" ) {
            section afm {
                choice policy default "/#do_not_use#" display "xxlarge" tcl {
                    set ::choices "Yes, use F5's recommended AFM configuration\t/#default#\nNo, do not use AFM to secure your application\t/#do_not_use#\n[tmsh::run_proc f5.iapp.1.5.1.cli:iapp_get_items -nocomplain security firewall policy]"
                    return [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_safe_display ::choices]
                }
                optional ( options.display_help == "show" ) {
                    message policy_full "BIG-IP Advanced Firewall Manager (AFM) is a high-performance, stateful, full-proxy network firewall designed to guard data centers against incoming threats that enter the network on the most widely deployed protocols.  BIG-IP AFM must be fully licensed and provisioned to use this functionality."
                }
                optional ( policy == "/#default#" ) {
                    choice restrict_by_addr default "/#do_not_use#" display "xxlarge" tcl {
                        set ::choices "No, do not restrict source addresses (allow all sources)\t/#do_not_use#\nRestrict source addresses\t/#create_new#\n[tmsh::run_proc f5.iapp.1.5.1.cli:iapp_get_items -nocomplain security firewall address-list]"
                        return [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_safe_display ::choices]
                    }
                    optional ( options.display_help == "show" ) {
                        message restrict_full "You can use the BIG-IP AFM to restrict access to your application by either IP address or network address. If enabled, the system will only allow access to the virtual server from the address(es) you specify."
                    }
                    optional ( restrict_by_addr == "/#create_new#" ) {
                        string allowed_addr display "xxlarge" required
                        optional ( options.display_help == "show" ) {
                            optional ( intro.is_v11_5 == "yes" ) {
                                message allowed_addr_full_1 "Specify the IP or network address that should have access to the application.  You can use a single IP address, a list of IP addresses separated by spaces, a range of IP addresses separated by a dash (for example 192.0.2.10-192.0.2.100), a single network address, such as 192.0.2.0/24, or any combination of these."
                            }
                            optional ( intro.is_v11_5 == "no" ) {
                                message allowed_addr_full_2 "Specify the IP or network address that should have access to the application.  You can use a single IP address, such as 192.0.2.100 or a network address, such as 192.0.2.0/24."
                            }
                        }
                    }
                }
                optional ( policy != "/#do_not_use#" ) {
                    choice restrict_by_reputation default "accept" display "xxlarge" {
                        "Allow all sources regardless of reputation"                => "accept"  ,
                        "Reject access from sources with a low reputation"          => "reject"  ,
                        "Allow but log access from sources with a low reputation"   => "warn"
                    }
                    optional ( options.display_help == "show" ) {
                        message restrict_by_reputation_full "The BIG-IP AFM uses an IP intelligence database to categorize IP addresses coming into the system. Select the way you want the system to handle IP addresses with a low reputation score."
                    }
                    optional ( options.display_help == "show" && restrict_by_reputation != "accept" ) {
                        message restrict_by_reputation_log "By default, IP Intelligence events are logged to Security > Event Logs > Network > IP Intelligence.  For the best performance, F5 recommends creating a remote logging profile to log IP Intelligence events. "
                    }
                    message restrict_by_reputation_warn "You must have an active IP Intelligence license for IP reputation-based access control to function correctly. "
                    choice staging_policy default "/#do_not_use#" display "xxlarge" tcl {
                        set ::choices "Do not apply a staging policy\t/#do_not_use#\n[tmsh::run_proc f5.iapp.1.5.1.cli:iapp_get_items -nocomplain security firewall policy]"
                        return [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_safe_display ::choices]
                    }
                    message staging_policy1_full "A policy in Staging mode does not block any traffic, and only logs what would be blocked if the policy were placed into production."
                    optional ( options.display_help == "show" ) {
                        message staging_policy_full "A staged policy allows you to evaluate the effect a policy has on traffic by analyzing the system logs, without actually modifying traffic based on the firewall rules.  You must already have a policy on the system in order to select it from the list.  For specific information on creating a staging policy, see the AFM documentation."
                    }
                    choice security_logging default "/#do_not_use#" display "xxlarge" tcl {
                        # Menu should display all log profiles with "network none".
                        # tmsh::run_proc f5.iapp.1.5.1.cli:iapp_get_items will not filter security log profiles,
                        # so the filter has been written inline here.
                        set ::choices "Do not use a logging profile\t/#do_not_use#\n"
                        if { [catch {
                            set profile_list [tmsh::list security log profile all-properties recursive]
                            if { [tmsh::pwd] != "/Common" } {
                                tmsh::cd /Common
                                append profile_list [tmsh::list security log profile all-properties recursive]
                            }
                        } err] } {
                            set profile_list " "
                        }
                        array set profiles  [string map {"security log profile" ""} $profile_list]
                        foreach name [array names profiles] {
                            array set subprofile $profiles($name)
                            if { [info exists subprofile(network)] && $subprofile(network) != "none" } {
                                append ::choices "$name\n"
                            }
                        }
                        return [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_safe_display ::choices]
                    }
                    optional ( options.display_help == "show" ) {
                        message security_logging_full "The logging profile enables you to log detailed information about BIG-IP system Network Firewall events and store those logs on the BIG-IP system or a remote logging server (syslog or Splunk). If you want to use a logging profile, we recommend creating one outside this template. Only logging profiles with Network Firewall enabled appear in the list. "
                        message security_logging1_full "If you are also using BIG-IP ASM, and the logging profile you created has both Application Security and Network Firewall enabled in the same profile, you must also select that profile here. See the BIG-IP AFM documentation for specific information on Logging profiles."
                    }
                }
            }
        }
    
                
                section ssl {
                    
        choice mode display "xxlarge" default "client_ssl" {
            "Terminate SSL for clients, plaintext to View servers (SSL offload)"   => "client_ssl"  ,
            "Terminate SSL for clients, re-encrypt to View servers (SSL bridging)"  => "client_ssl_server_ssl"
        }
        optional ( options.display_help == "show" ) {
            message mode_1_inline_help "SSL is a cryptographic protocol used to secure client to server communications. Select how you want the BIG-IP system to handle encrypted traffic."
            message mode_2_inline_help "If your environment requires clients use SSL and session persistence (which ensures requests from a single user are always distributed to the server on which they started), we recommend you configure the BIG-IP system for SSL offload. This allows the system to more accurately persist connections based on granular protocol or application-specific variables. Because encryption and decryption of SSL is computationally intensive and consumes server CPU resources, if your environment does not require encryption between the BIG-IP system and the View servers, select SSL Offload to terminate the SSL session from the client at the BIG-IP system and provide cleartext communication from the BIG-IP system to the servers."
            message mode_3_inline_help "If security requirements do not allow the BIG-IP system to offload SSL, select to re-encrypt to the  servers (SSL bridging). With this selection the system uses the SSL ID or Client/Server IP to enforce session persistence. Because these parameters are less granular, you may experience inconsistent distribution of client requests."
        }
    
                    optional ( options.advanced_mode == "yes" ) {
                        choice client_ssl_profile display "xxlarge" default "/#default#" tcl {
                            set ::choices "Create a new Client SSL profile\t/#default#\n[tmsh::run_proc f5.iapp.1.5.1.cli:iapp_get_items ltm profile client-ssl]"
                            return [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_safe_display ::choices]
                        }
                        optional (options.display_help == "show") {
                            message sslprofile_inline_help "If you have already created an Client SSL profile that includes the appropriate certificate and key, you can select it from the list.  Otherwise, the iApp creates a new Client SSL profile. "
                        }
                    }
                    
        optional ( apm.use_smartcard == "yes" && ( options.advanced_mode == "no"
         || client_ssl_profile == "/#default#") ) {
            choice ca_bundle default "/Common/default.crt" display "xxlarge" tcl {
                set ::choices [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_get_items -norecursive sys file ssl-cert]
                return [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_safe_display ::choices]
            }
            optional ( options.display_help == "show" ) {
                message ca_bundle_inline_help "Because you are supporting smart card authentication, you must have imported a Certificate Authority certificate bundle onto the BIG-IP system, or use the BIG-IP system's internal ca-bundle.crt bundle. If you want to use a third-party certificate bundle, it must already be imported onto the system for it to appear in this list.  The certificate bundle is used in the BIG-IP Client SSL profile created by the iApp in the Trusted Certificate Authorities and Advertised Certificate Authorities fields."
            }
            choice client_cert_ca default "/Common/default.crt" display "xxlarge" tcl {
                set ::choices "None\t/#do_not_use#\n[tmsh::run_proc f5.iapp.1.5.1.cli:iapp_get_items -norecursive sys file ssl-cert]"
                return [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_safe_display ::choices]
            }
            optional ( options.display_help == "show" ) {
                message client_cert_ca_inline_help "Because you are supporting smart card authentication, you must have imported a Certificate Authority certificate bundle onto the BIG-IP system, or use the BIG-IP system's internal ca-bundle.crt bundle. If you want to use a third-party certificate bundle, it must already be imported onto the system for it to appear in this list.  The certificate bundle is used in the BIG-IP Client SSL profile created by the iApp in the Trusted Certificate Authorities and Advertised Certificate Authorities fields."
            }
        }
    
                    optional ( options.advanced_mode == "no"
                    || client_ssl_profile == "/#default#" ) {
                        choice cert default "/Common/default.crt" display "xxlarge" tcl {
                            set ::choices [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_get_items -norecursive -filter NAME !~ ca-bundle.crt|f5-irule.crt sys file ssl-cert]
                            return [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_safe_display ::choices]
                        }
                        optional (options.display_help == "show") {
                            message sslcert_inline_help "To establish encrypted communication, a client and server negotiate security parameters that are used for the session. As part of this handshake, a certificate is provided by the server to the client to identify itself. The client can then validate the certificate with an authority for authenticity before sending data. When the BIG-IP system is decrypting communication between the client and server, an SSL certificate and key pair for each fully-qualified DNS name related to this application instance must be configured on the system."
                            message sslcert2_inline_help "Select the SSL certificate you imported for this deployment.  Importing certificates and keys is not a part of this template, see Local Traffic >> SSL Certificate List. To select any new certificates and keys you import, you need to restart or reconfigure this template."
                        }
                        choice key  default "/Common/default.key" display "xxlarge" tcl {
                            
                            set ::choices [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_get_items -norecursive -filter security-type ne "password" sys file ssl-key]
                            return [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_safe_display ::choices]
                        }
                        optional (options.display_help == "show") {
                            message sslkey_inline_help "Select the associated SSL key."
                        }
                        optional ( cert == "/Common/default.crt"
                         || key == "/Common/default.key" ) {
                             message ssl_warn_1 "You have selected a default BIG-IP certificate and/or key. This application service configuration is incomplete and will not be secure until you import and assign a trusted certificate and key that are valid for all fully qualified domain names used to access the application. See Local Traffic >> SSL Certificate List for importing certificates and keys. To select any new certificates and keys you import, you need to restart or reconfigure this template."
                        }
                        optional ( options.advanced_mode == "yes" ) {
                            message ssl_warn_3 "If your key is password-protected, you must manually create a Client SSL profile outside the iApp, and then select it from the list above."
                        }
                        
        optional ( options.advanced_mode == "no" ) {
        message ssl_warn_2 "If your key is password-protected, you must build a Client SSL profile outside the iApp, and then identify it in Advanced configuration mode."
        }
    
        optional ( options.advanced_mode == "yes" ) {
            choice use_cert_chain display "xxlarge" default "/#do_not_use#" tcl {
                set ::choices "Do not use an Intermediate certificate\t/#do_not_use#\n[tmsh::run_proc f5.iapp.1.5.1.cli:iapp_get_items -norecursive -filter NAME !~ ca-bundle.crt|f5-irule.crt sys file ssl-cert]"
                return [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_safe_display ::choices]
            }
            optional ( options.display_help == "show" ) {
                message use_cert_chain_1_inline_help "Intermediate certificates, also called Intermediate certificate chains or chain certificates, are used to help systems which depend on SSL certificates for peer identification. These certificates are intended to create a chain of trust between the CA that signed the certificate and the CA that is already trusted by the recipient of the certificate. This allows the recipient to verify the validity of the certificates presented, even when the signing CA is unknown."
                message use_cert_chain_2_inline_help "Intermediate certificates must be created or imported onto this BIG-IP system prior to running this iApp. See http://support.f5.com/kb/en-us/solutions/public/13000/300/sol13302.html for help on creating an intermediate certificate chain."
            }
        }
    
                    }
                    optional ( options.advanced_mode == "yes" ) {
                        choice redirect_to_https display "xxlarge" default "yes" {
                            "Redirect HTTP to HTTPS"        => "yes"  ,
                            "Do not redirect HTTP to HTTPS" => "no"
                        }
                        optional (options.display_help == "show") {
                            message redirect_inline_help "It is common for users to mistakenly attempt insecure access (HTTP) to a secure application (HTTPS). The BIG-IP system can automatically redirect these connections to use an encrypted connection."
                        }
                        optional ( redirect_to_https == "yes" ) {
                            string redirect_port display "medium" validator "PortNumber" default "80"
                            optional (options.display_help == "show" ) {
                                message redirect_port_inline_help "Specify the HTTP port from which you want users redirected.  The most common HTTP port is 80."
                            }
                        }
                    }
                    optional ( options.advanced_mode == "yes" && mode == "client_ssl_server_ssl" ) {
                        choice server_ssl_profile display "xxlarge" default "/#default#" tcl {
                            set ::choices "Use F5's recommended Server SSL profile\t/#default#\n[tmsh::run_proc f5.iapp.1.5.1.cli:iapp_get_items ltm profile server-ssl]"
                            return [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_safe_display ::choices]
                        }
                        optional ( options.display_help == "show" ) {
                            message bridging_inline_help "With SSL Bridging, the BIG-IP system accepts encrypted (HTTPS) traffic from clients, decrypts it for processing and optimization, and then re-encrypts it (HTTPS) before sending it to the  servers. The servers must also process the encrypted traffic, so you have to install and manage certificates on both the servers and the BIG-IP system. Certificates that you install on the servers may be self-signed and can be a lesser encryption strength (shorter bit length) than the certificate on the BIG-IP system if internal encryption requirements are different than those that apply to public-facing traffic. You may need to import a certificate and key before deploying this template. See Local Traffic >> SSL Certificate List for importing certificates and keys. SSL Bridging requires a Server SSL profile."
                        }
                    }
                }
                optional ( intro.is_v11_4 == "no" || intro.apm_provisioned == "no" || apm.use_apm == "no" ) {
                    section pcoip {
                        choice use_pcoip display "xxlarge" default "no" {
                            "Yes, PCoIP connections should go through the BIG-IP system" => "yes"  ,
                            "No, PCoIP connections should not go through the BIG-IP system"     => "no"
                        }
                        optional ( use_pcoip == "yes" ) {
                            optional ( options.display_help == "show" ) {
                                message use_pcoip_inline_help "Select this option if PCoIP connections will be routed through the BIG-IP system."
                            }
                            choice forward display "xxlarge" default "no" {
                                "Yes, PCoIP connections are proxied by the View Security Servers"    => "yes"  ,
                                "No, PCoIP connections are not proxied by the View Security Servers" => "no"
                            }
                            optional ( forward == "no" ) {
                                optional ( options.display_help == "show" ) {
                                    message forward_inline_help "By selecting this option, the BIG-IP system creates two IP forwarding virtual servers, one UDP and one TCP on port 4172. These virtual servers act as a route between the View Clients and the Virtual Desktops."
                                }
                                string addr display "large" required validator "IpAddress"
                                optional ( options.display_help == "show" ) {
                                    message forward_addr_mask_inline_help "This network address (together with the network mask in the next question) will provide a route between the client and the Virtual Desktops for port 4172 only."
                                }
                                string mask display "large" required validator "IpAddress"
                                optional ( options.display_help == "show" ) {
                                    message forward_mask_inline_help "This is the network mask associated with the network where the virtual desktops reside."
                                }
                                choice vlan_listening display "xxlarge" {
                                    "All VLANs should accept PCoIP traffic"       => "all_vlans"  ,
                                    "Accept PCoIP traffic only from specific VLANs"  => "enabled_on"  ,
                                    "Deny PCoIP traffic from specific VLANs" => "disabled_on"
                                }
                                optional ( options.display_help == "show" ) {
                                    message vlan_selections_inline_help "As an additional layer of security, the template allows the option of restricting PCoIP traffic destined for the forwarding virtual servers to specific VLANs on the BIG-IP system. Select whether you want to allow traffic from all VLANs, or specify the VLANs that can accept or should deny traffic."
                                }
                                optional ( vlan_listening != "all_vlans" ) {
                                    multichoice vlan_selections tcl {
                                        set ::choices [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_get_items net vlan]
                                        return [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_safe_display ::choices]
                                    }
                                    optional ( options.display_help == "show" ) {
                                        message pcoip_vlans_inline_help "Specify the VLANs that should accept or deny PCoIP traffic."
                                    }
                                }
                            }
                            optional ( forward == "yes" ) {
                                optional ( options.display_help == "show" ) {
                                    message forward_no_inline_help "By selecting this option, the BIG-IP system does not create Forwarding virtual servers, but instead directs all PCoIP traffic back to the View Security Servers. For this option to function properly, you must enable the 'Use Secure Tunnel for PCoIP' option on the VMware View Security servers, and enter the IP address entered in the next section with port 4172 appended. For example, 192.0.2.100:4172."
                                }
                            }
                            choice ltm_use_html5 display "xxlarge" default "no" {
                                "Yes, support HTML 5 View clientless browser connections" => "yes"  ,
                                "No, support only View Client connections" => "no"
                            }
                            optional ( options.display_help == "show" ) {
                                message ltm_use_html5_inline_help "Choose Yes to enable support for both HTML 5 clientless browser connections and View Client connections to the Virtual Desktops. Choose No if you only need to support View Client connections and do not need to support the View HTML 5 client. When supporting HTML 5 clients, verify the View Connection Servers are configured to point HTML 5 connections to BIG-IP virtual server address."
                            }
                        }
                        optional ( use_pcoip == "no" ) {
                            optional ( options.display_help == "show" ) {
                                message use_pcoip_no_inline_help "If PCoIP connections do not go through the BIG-IP system, you must have a route on the BIG-IP system for traffic between the client and the Virtual Desktop. Configuring routes is not a part of this template; see Network >> Routes. If you do not have a route between the View Client and the Virtual Desktop, select Yes, or exit this iApp template and configure a route on the BIG-IP system. For more information on configuring routes on the BIG-IP system, see the online help or product manuals."
                            }
                        }
                    }
                }
                section pool {
                    string vs_addr display "large" validator "IPAddress"  required
                    optional ( options.display_help == "show" ) {
                        message vs_addr_inline_help "This IP address, combined with the port you specify below, becomes the BIG-IP virtual server address and port, which public clients use to access the application. The system intercepts requests to this IP:Port and distributes them to the View Connection Servers."
                    }
                    optional ( intro.apm_provisioned == "yes" && apm.use_apm == "yes" && intro.is_v11_4 == "yes" && apm.use_unp == "no" ) {
                        string vs_addr_internal display "large" validator "IPAddress"
                        optional ( options.display_help == "show" ) {
                            message vs_addr_internal_inline_help "This IP address, combined with the port you specify below, becomes the BIG-IP virtual server address and port, which trusted internal clients use to access the application. The system intercepts requests to this IP:Port and distributes them to the View Connection Servers. Leave this field blank if you do not wish to create a virtual server for internal trusted clients."
                        }
                    }
                    string vs_port display "medium" validator "PortNumber" required default "443"
                    optional ( options.display_help == "show" ) {
                        message ha_inline_help "Specify the service port you want to use for the virtual server(s). The port you specify here is used for the remote, untrusted client virtual server, as well as for the optional internal, trusted virtual server. The default value displayed here is based your answer to the question asking how the system should handle SSL traffic."
                    }
                    optional ( intro.apm_provisioned == "yes" && apm.use_apm == "yes" ) {
                        optional ( options.display_help == "show" ) {
                            message apm_addr_inline_help "Because you are using BIG-IP APM, the BIG-IP APM first authenticates the user, and then uses this virtual server address to transparently connect the user to the View environment."
                        }
                    }
                    string fqdn display "large" validator "FQDN" required
                    optional ( options.display_help == "show" ) {
                        message fqdn_inline_help "The FQDN entered here will be used by the View Client to resolve to the virtual IP entered above."
                    }
                    optional ( options.advanced_mode == "yes" ) {
                        optional ( intro.is_v11_4 == "no" || intro.apm_provisioned == "no" || apm.use_apm == "no" ) {
                            choice persistence display "xxlarge" default "/#default#" tcl {
                                set ::choices "Use F5's recommended persistence profile\t/#default#\nDo not use persistence\t/#do_not_use#\n[tmsh::run_proc f5.iapp.1.5.1.cli:iapp_get_items ltm persistence hash]\n[tmsh::run_proc f5.iapp.1.5.1.cli:iapp_get_items ltm persistence source-addr]"
                                set license_detail "[tmsh::show sys license detail]"
                                if { [string match *ltm_persist_cookie* $license_detail] } {
                                    append ::choices "\n[tmsh::run_proc f5.iapp.1.5.1.cli:iapp_get_items ltm persistence cookie]"
                                }
                                if { [string match *ltm_persist_wts* $license_detail] } {
                                    append ::choices "\n[tmsh::run_proc f5.iapp.1.5.1.cli:iapp_get_items ltm persistence msrdp]"
                                }
                                if { [string match *ltm_persist_ssl_id* $license_detail] } {
                                    append ::choices "\n[tmsh::run_proc f5.iapp.1.5.1.cli:iapp_get_items ltm persistence ssl]"
                                }
                                if { [string match *ltm_persist_universal* $license_detail] } {
                                    append ::choices "\n[tmsh::run_proc f5.iapp.1.5.1.cli:iapp_get_items ltm persistence universal]"
                                }
                                return [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_safe_display ::choices]
                            }
                            optional ( options.display_help == "show" ) {
                                message persistence_inline_help "With persistence, the BIG-IP system tracks and stores session data, such as the specific pool member that serviced a client request. The F5 recommended method for tracking View sessions is Source Address persistence, which uses the source address to direct all subsequent requests from a given client to the same View server in the pool. We recommend this method, unless you have a specific reason to use another profile."
                            }
                        }
                        lb_method lb_method_choice
                        optional ( options.display_help == "show" ) {
                            message lb_method_inline_help "A load balancing method is an algorithm that the BIG-IP system uses to select a pool member for processing a request. F5 recommends the Least Connections load balancing method, where new connections are routed to the node that has the least number of current connections. This is ideal for environments in which pool members have similar performance and capacity capabilities. For a complete description of all load balancing methods, see the BIG-IP system documentation."
                        }
                        choice tcp_req_queuing display "xxlarge" default "no" {
                            "Yes, enable TCP request queuing"         => "yes"  ,
                            "No, do not enable TCP request queuing"  => "no"
                        }
                        optional ( options.display_help == "show" ) {
                            message tcp_request_queue_2_inline_help "TCP request queuing provides the ability to queue connection requests that exceed the capacity of connections for a pool, pool member, or node, as determined by the connection limit. If you enable TCP request queuing, you must specify a queue length and timeout for queued requests based on server capability, load, and need for shared resources."
                        }
                        optional ( tcp_req_queuing == "yes" ) {
                            message tcp_request_queue_1_inline_help "Improper use or misconfiguration of TCP Request Queuing/Connection Limits can result in unwanted application behavior and poor performance of your BIG-IP system. For this reason we recommended you verify these settings impact prior to deployment in a production environment. You must add a Connection Limit to your pool members for TCP request queuing."
                        }
                        optional ( tcp_req_queuing == "yes" ) {
                            string tcp_queue_length display "medium" validator "NonNegativeNumber" required
                            optional ( options.display_help == "show" ) {
                                message tcp_request_note_inline_help "Specify a number for the length of the queue.  You should not use a value of '0', which indicates an unlimited queue length, and is only constrained by available memory."
                            }
                            string tcp_queue_timeout display "medium" validator "NonNegativeNumber" required
                            optional ( options.display_help == "show" ) {
                                message tcp_request_timeout_inline_help "Specify a number of milliseconds that requests should remain in the queue before timing out."
                            }
                        }
                        choice use_slow_ramp default "yes" display "xxlarge" {
                            "Use Slow Ramp"        => "yes"  ,
                            "Do not use Slow Ramp" => "no"
                        }
                        optional ( use_slow_ramp == "yes" ) {
                            optional ( options.display_help == "show" ) {
                                message slow_ramp_inline_help "With Slow Ramp, the BIG-IP system gradually adds connections to a newly-enabled or newly-added View server over a time period you specify, rather than sending a full proportion of the traffic immediately. Slow Ramp is essential when using load balancing methods like Least Connections, as the BIG-IP system would otherwise send all new connections to a new server immediately, potentially overwhelming that server. The time period you select for Slow Ramp is highly dependent on the speed of your server hardware and the behavior of your web services. The default setting of 300 seconds (5 minutes) is very conservative in most cases."
                            }
                            string slow_ramp_setvalue display "medium" default "300" required validator "NonNegativeNumber"
                            optional ( options.display_help == "show" ) {
                                message slow_ramp_value_inline_help "Specify the duration (in seconds) for Slow Ramp time (the amount of time the system sends less traffic to a newly-enabled pool member). The default setting of 300 seconds  (5 minutes) is very conservative in most cases."
                            }
                        }
                        choice use_pga default "no" display "xxlarge" {
                            "Do not use Priority Group Activation" => "no"  ,
                            "Use Priority Group Activation"        => "yes"
                        }
                        optional ( options.display_help == "show" ) {
                            message pga_inline_help "Priority Group Activation allows you to segment your servers into priority groups.  With Priority Group Activation, the BIG-IP system load balances traffic according to the priority number you assign to the pool members. A higher number indicates higher priority. Traffic is only sent to the servers with the highest priority, unless the number of available servers in that priority group falls below the value you specify as the minimum. The BIG-IP system then sends traffic to the group of servers with the next highest priority, and so on. See the BIG-IP documentation for more details."
                        }
                        optional ( use_pga == "yes" ) {
                            string min_active_members display "medium" default "0" required validator "NonNegativeNumber"
                            optional ( options.display_help == "show" ) {
                                message min_active_members_inline_help "Specify the minimum number of servers that must be active to continue sending traffic to the priority group.  If the number of active servers falls below this minimum, traffic will be sent to the group of servers with the next-highest priority group number."
                            }
                        }
                    }
                    table pool_members {
                        editchoice addr display "large" tcl {
                            set ::choices [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_get_items ltm node]
                            return [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_safe_display ::choices]
                        }
                        optional ( ssl.mode == "client_ssl" ) {
                            string port display "small" required default "80" validator "PortNumber"
                        }
                        optional ( ssl.mode == "client_ssl_server_ssl" ) {
                            string port_secure display "small" required default "443" validator "PortNumber"
                        }
                        string connection_limit display "small" required default "0" validator "NonNegativeNumber"
                        optional ( lb_method_choice == "ratio-member"
                         || lb_method_choice == "ratio-node"
                         || lb_method_choice == "ratio-session"
                         || lb_method_choice == "ratio-least-connections-member"
                         || lb_method_choice == "ratio-least-connections-node"
                         || lb_method_choice == "dynamic-ratio-member"
                         || lb_method_choice == "dynamic-ratio-node") {
                             string ratio default "1" validator "NonNegativeNumber" display "small"
                         }
                        optional ( use_pga == "yes" ) {
                            string priority default "0" required validator "NonNegativeNumber" display "small"
                        }
                    }
                    optional ( options.display_help == "show" ) {
                        message pool_members_inline_help "Specify the IP address(es) of your View servers. If you have existing nodes on this BIG-IP system, you can select them from the list, otherwise type the addresses. Depending on your previous selections, you may need to add a Priority or Connection Limit. Click Add to include additional servers."
                    }
                    optional ( options.advanced_mode == "yes" ) {
                        choice same_subnet display "xxlarge" default "no" {
                            "BIG-IP virtual server IP and View servers are on different subnets"    => "no"  ,
                            "BIG-IP virtual server IP and View servers are on the same subnet"      => "yes"
                        }
                        optional ( options.display_help == "show" ) {
                            message subnet_1_inline_help "It is important to ensure that responses to client requests made using the BIG-IP virtual server address are returned through the BIG-IP system. If the client receives a response directly from the View server, the connection is dropped. The way the BIG-IP system handles this depends on your network topology."
                            message subnet_2_inline_help "For environments in which the virtual server IP address is on a subnet different from the View servers, select BIG-IP virtual server IP and the View servers are on different subnets."
                            message subnet_3_inline_help "For environments in which the virtual server IP address provided is on the same subnet as the View servers in the associated pool, select BIG-IP virtual server IP and the View servers are on the same subnet. This enables Secure Network Address Translation (SNAT Auto Map). This configuration results in the BIG-IP system replacing the client IP address of an incoming connection with its self IP address (using floating addresses when available), ensuring the server response returns through the BIG-IP system. "
                        }
                        optional ( same_subnet == "no" ) {
                            choice bigip_route display "xxlarge" default "no" {
                                "View servers have a route to clients through the BIG-IP"           => "yes"  ,
                                "View servers do not have a route to clients through the BIG-IP"    => "no"
                            }
                            optional ( options.display_help == "show" ) {
                                message def_rt_1_inline_help "For environments in which the virtual server IP is on a subnet different from the View servers, information regarding the IP setting of the View servers is required to ensure the correct BIG-IP system configuration."
                                message def_rt_2_inline_help "If the View servers use the BIG-IP system as their default gateway, select View servers have a route for clients through the BIG-IP. In this scenario, no configuration is needed to support your environment to ensure correct server response handling."
                                message def_rt_3_inline_help "If the View servers do not have a route through the BIG-IP system, select View servers do not have a route for clients through the BIG-IP. This enables Secure Network Address Translation (SNAT Auto Map). This configuration results in the BIG-IP system replacing the client IP address of an incoming connection with its self IP address (using floating addresses when available) ensuring the server response returns through the BIG-IP system. "
                            }
                        }
                        choice xff display "xxlarge" default "yes" {
                            "Yes, insert the X-Forwarded-For HTTP header"        => "yes"  ,
                            "No, do not insert the X-Forwarded-For HTTP header" => "no"
                        }
                        optional ( options.display_help == "show" ) {
                            message xff_inline_help "If you choose to insert the X-Forwarded-For header, the BIG-IP system inserts the original client IP address in the HTTP header for logging purposes. Additional configuration may be required on the View server to log the value of the X-Forwarded-For header."
                        }
                    }
                    
                }
                optional ( intro.apm_provisioned == "no" || apm.use_apm == "no" || intro.is_v11_4 == "no" || options.advanced_mode == "yes" ) {
                    section client {
                        optional ( intro.apm_provisioned == "no" || apm.use_apm == "no" || intro.is_v11_4 == "no" ) {
                            optional ( options.advanced_mode == "yes" ) {
                                choice standard_caching display "xxlarge" default "/#do_not_use#" tcl {
                                    set ::choices "Use F5's recommended Web Acceleration profile\t/#default#\nDo not use a Web Acceleration profile\t/#do_not_use#\n[tmsh::run_proc f5.iapp.1.5.1.cli:iapp_get_items ltm profile web-acceleration]"
                                    return [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_safe_display ::choices]
                                }
                                optional ( options.display_help == "show" ) {
                                    message about_custom_caching_inline_help_1 "Caching is the local storage of data for re-use. Once an item is cached on the BIG-IP system, subsequent requests for the same data are served from local storage. This can improve client request response times and improve server scalability by reducing load associated with processing subsequent requests."
                                    message about_custom_caching_inline_help_2 "Use a custom Web Acceleration profile only if you need to define specific URIs that should or should not be cached."
                                }
                            }
                            choice http_compression display "xxlarge" default "/#do_not_use#" tcl {
                                set ::choices "Do not compress HTTP responses\t/#do_not_use#\nUse F5's recommended compression profile\t/#default#\n[tmsh::run_proc f5.iapp.1.5.1.cli:iapp_get_items ltm profile http-compression]"
                                return [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_safe_display ::choices]
                            }
                            optional ( options.display_help == "show" ) {
                                message comp_inline_help "Compression improves performance and end user experience for Web applications that suffer from WAN latency and throughput bottlenecks. Compression reduces the amount of traffic sent to the client to complete a transaction."
                            }
                        }
                        optional ( options.advanced_mode == "yes" ) {
                            choice tcp_opt display "xxlarge" default "/#wan#" tcl {
                                set ::choices "Use F5's recommended optimizations for WAN clients\t/#wan#\nUse F5's recommended optimizations for LAN clients\t/#lan#\n[tmsh::run_proc f5.iapp.1.5.1.cli:iapp_get_items ltm profile tcp]"
                                return [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_safe_display ::choices]
                            }
                            optional ( options.display_help == "show" ) {
                                message tcp_inline_help "The client-side TCP profile optimizes the communication between the BIG-IP system and the client by controlling the behavior of the traffic which results in higher transfer rates, improved connection reliability and increased bandwidth efficiency."
                            }
                        }
                    }
                    optional ( options.advanced_mode == "yes" ) {
                        section server {
                            optional (  intro.apm_provisioned == "no" || apm.use_apm == "no" || intro.is_v11_4 == "no" ) {
                                choice oneconnect display "xxlarge" default "/#do_not_use#" tcl {
                                    set ::choices "Do not use a OneConnect profile\t/#do_not_use#\nUse F5's recommended OneConnect profile\t/#default#\n[tmsh::run_proc f5.iapp.1.5.1.cli:iapp_get_items ltm profile one-connect]"
                                    return [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_safe_display ::choices]
                                }
                                optional ( options.display_help == "show" ) {
                                    message oc_inline_help "OneConnect (connection pooling or multiplexing) improves server scalability by reducing load associated with concurrent connections and connection rate to View servers. When enabled, the BIG-IP system maintains one connection to each View server which is used to send requests from multiple clients."
                                }
                            }
                            choice tcp_opt display "xxlarge" default "/#lan#" tcl {
                                set ::choices "Use F5's recommended optimizations for the LAN\t/#lan#\nUse F5's recommended optimizations for the WAN\t/#wan#\n[tmsh::run_proc f5.iapp.1.5.1.cli:iapp_get_items ltm profile tcp]"
                                return [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_safe_display ::choices]
                            }
                            optional ( options.display_help == "show" ) {
                                message tcp_inline_help "The server-side TCP profile optimizes the communication between the BIG-IP system and the server by controlling the behavior of the traffic which results in higher transfer rates, improved connection reliability and increased bandwidth efficiency."
                            }
                        }
                    }
                }
                
                section monitor {
                    choice monitor display "xxlarge" default "/#create_new#" tcl {
                        if { [string first ltm_lb_least_conn [tmsh::show sys license detail]] != -1 } {
                            set ::choices "Create a simple health monitor\t/#create_new#\nCreate an advanced health monitor\t/#create_advanced#\n[tmsh::run_proc f5.iapp.1.5.1.cli:iapp_get_items ltm monitor http]\n[tmsh::run_proc f5.iapp.1.5.1.cli:iapp_get_items ltm monitor https]\n[tmsh::run_proc f5.iapp.1.5.1.cli:iapp_get_items -filter NAME != "external" ltm monitor external]"
                        } else {
                            set ::choices "Create a simple health monitor\t/#create_new#\n[tmsh::run_proc f5.iapp.1.5.1.cli:iapp_get_items ltm monitor http]\n[tmsh::run_proc f5.iapp.1.5.1.cli:iapp_get_items ltm monitor https]\n[tmsh::run_proc f5.iapp.1.5.1.cli:iapp_get_items -filter NAME != "external" ltm monitor external]"
                        }
                        return [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_safe_display ::choices]
                    }
                    optional ( apm.use_smartcard == "yes" && monitor == "/#create_advanced#" ) {
                        message monitor_adv_smart_inline_help "Advanced monitor is unavable when using smart card authenticaiton. Select a simple monitor or choose an existing monitor."
                    }
                    optional ( options.display_help == "show" && apm.use_unp == "no" && apm.use_smartcard == "no" ) {
                        message monitor_inline_help "Monitors are used to determine the health of the application on each View server. If an application instance does not respond or responds incorrectly, the system will cease sending client requests to that View server. The system will continue to monitor the instance and will begin sending requests once the application responds correctly. Simple monitor verifies basic web services are healthy on View servers. The advanced monitor verifies all View services required to render published pools are properly running, and at least one available entitled pool for the specified user is available. If you have manually created a health monitor specifically for this deployment, you can select it from the list."
                    }
                    optional ( options.display_help == "show" && ( apm.use_unp == "yes" || apm.use_smartcard == "yes" ) ) {
                        message monitor_inline_help2 "Monitors are used to determine the health of the application on each View server. If an application instance does not respond or responds incorrectly, the system will cease sending client requests to that View server. The system will continue to monitor the instance and will begin sending requests once the application responds correctly. Simple monitor verifies basic web services are healthy on View servers. If you have manually created a health monitor specifically for this deployment, you can select it from the list."
                    }
                    optional ( monitor == "/#create_advanced#" && apm.use_smartcard == "no" ) {
                        string user required
                        optional ( options.display_help == "show" ) {
                            message user_inline_help "CRITICAL: The View service account you specify here must be set to never expire. A deleted or locked account will cause the BIG-IP system to mark your View server pool members as unavailable, which takes them offline. This user must have at least one available and entitled virtual desktop pool. If there is not at least one entitled and available pool available for the specified user, the BIG-IP system will mark your View server members as unavailable."
                        }
                        password passwd required
                        optional ( options.display_help == "show" ) {
                            message passwd_inline_help "IMPORTANT: Credentials are stored in plaintext on your BIG-IP system."
                        }
                        string netbios_name display "xxlarge" required
                        optional ( options.display_help == "show" ) {
                            message netbios_name_inline_help "Specify the NetBIOS domain for the specified user's View environment. For example, if the FQDN is 'my.example.com', the NetBIOS domain is 'my'."
                        }
                        choice disclaimer display "xxlarge" default "0" {
                            "No, Connection Servers do not have a pre-login message" => "0"  ,
                            "Yes, Connection Servers have a pre-login message" => "1"
                        }
                        optional ( options.display_help == "show" ) {
                            message disclaimer_inline_help "A pre-login message requires the user agree to the message to continue. Selecting Yes configures the monitor to send a correct response to the pre-login message sent by the Connection Server. Select Yes, if your View Connection Servers have a pre-login message configured and enabled; otherwise select No."
                        }
                        choice debug display "xxlarge" default "0" {
                            "Do not enable monitor logging" => "0"  ,
                            "Enable Notice monitor logging" => "1"  ,
                            "Enable Debug monitor logging" => "2"
                        }
                        optional ( options.display_help == "show" ) {
                            message debug_inline_help "Select the log level for the associated monitor being used in this solution. Log entries are found in the LTM system log file - /var/log/ltm."
                        }
                        table application {
                            string app display "xxlarge" required
                        }
                        optional ( options.display_help == "show" ) {
                            message application_inline_help "The published application name or desktop pool is case sensitive and must exactly match the resource display name you have configured on your Connection servers. Separate multiple published applications or desktop pools with a space."
                        }
                        choice application_all display "xxlarge" default "0" {
                            "All listed applications or desktop pools need to be returned by server" => "1"  ,
                            "Only one of the applications or desktop pools listed need to be returned by server" => "0"
                        }
                        optional ( options.display_help == "show" ) {
                            message application_all_inline_help "Selecting 'all listed applications or desktop pools need to be returned by server' requires all the listed applications or pools be available to the specified user in order for the monitor to mark the server as healthy. Selecting 'only one of the applications or desktop pools listed need to be returned by server' requires only one of the applications or desktop pools be available to the specified user in order for the monitor to mark the server as healthy."
                        }
                    }
                    optional ( monitor == "/#create_new#" || monitor == "/#create_advanced#" ) {
                        string frequency display "medium" required default "30" validator "NonNegativeNumber"
                        optional ( options.display_help == "show" ) {
                            message freq_inline_help "This is the duration, in seconds, of a single monitor cycle. At this interval, the system checks the health of the application instance on each View server configured in the View server pool."
                        }
                    }
                }
                optional ( options.advanced_mode == "yes" ) {
                    section irules {
                        message irule_1_inline_help "Improper use or misconfiguration of an iRule can result in unwanted application behavior and poor performance of your BIG-IP system. For this reason we recommended you verify the impact of an iRule prior to deployment in a production environment."
                    optional ( options.display_help == "show" ) {
                        message irule_2_inline_help "The BIG-IP system supports a scripting language to allow an administrator to instruct the system to intercept, inspect, transform, direct and track inbound or outbound application traffic. An iRule contains the set of instructions the system uses to process data flowing through it, either in the header or payload of a packet."
                        message irule_3_inline_help "Correct event priority is critical when assigning multiple iRules. For more information about iRule event priority, see https://devcentral.f5.com/wiki/iRules.priority.ashx"
                    }
                        multichoice irules display "xlarge" tcl {
                            set ::choices [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_get_items -filter NAME !~ "^_sys" ltm rule]
                            return [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_safe_display ::choices]
                        }
                        optional ( intro.apm_provisioned == "yes"
                         && apm.use_apm == "yes" && intro.is_v11_4 == "no" ) {
                            multichoice apm_irules display "xlarge" tcl {
                                set ::choices [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_get_items -filter NAME !~ "^_sys" ltm rule]
                                return [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_safe_display ::choices]
                            }
                        }
                    }
                }
                optional ( options.advanced_mode == "yes" ) {
                    section stats {
                        optional ( intro.analytics_provisioned == "yes" ) {
                            choice analytics display "xxlarge" default "/#do_not_use#" tcl {
                                set ::choices "Do not enable Application Visibility Reporting for analytics\t/#do_not_use#\nUse the default analytics profile\t/#default#\n[tmsh::run_proc f5.iapp.1.5.1.cli:iapp_get_items -nocomplain ltm profile analytics]"
                                return [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_safe_display ::choices]
                            }
                            optional ( options.display_help == "show" ) {
                                message avr_1_inline_help "Enabling Analytics may affect overall system performance."
                                message avr_2_inline_help "The Application Visibility Reporting (AVR) module allows you to view statistics specific to your web application. "
                                message avr_3_inline_help "While this template includes a default Analytics profile, for full functionality and flexibility, we recommend you create a custom Analytics profile for this application service. Creating a custom profile is not a part of this template; see Local Traffic >> Profiles : Analytics. Once you have created an Analytics profile, you can select it from the list below. To select any new profiles you create, you need to restart or reconfigure this template."
                            }
                        }
                        choice request_logging display "xxlarge" default "/#do_not_use#" tcl {
                            set ::choices "Do not enable HTTP request logging\t/#do_not_use#\n[tmsh::run_proc f5.iapp.1.5.1.cli:iapp_get_items ltm profile request-log]"
                            return [tmsh::run_proc f5.iapp.1.5.1.cli:iapp_safe_display ::choices]
                        }
                        optional ( options.display_help == "show" ) {
                            message req_log_inline_help "HTTP request logging enables customizable log messages to be sent to a syslog server for each HTTP request processed by this application. Successful usage of this feature requires creation and association of a request logging profile. Creating a request logging profile is not a part of this template. See Local Traffic>>Profiles: Other: Request Logging.  To select any new profiles you create, you need to restart or reconfigure this template. The performance impact of using this feature should be thoroughly tested in a staging environment prior to enabling on a production deployment."
                        }
                    }
                }
                optional ( options.display_help == "show" ) {
                    section extra {
                        
        message dns "You must configure a DNS entry with the fully qualified host name that clients will use to access the View environment. The DNS record must resolve to the IP address you configured for the BIG-IP APM network access virtual server."
        message ssloffload "Depending on your  service and application software, you may have to perform additional steps on your  application to enable SSL Offloading. If you are performing SSL offload on the BIG-IP system, you may need to configure your servers not to expect SSL to avoid redirect loops and needless redirects. Also, the server software may need to be configured to handle any HTTP/1.1 Host headers you specified during monitor creation."
        optional (( ssl.mode == "client_ssl" || ssl.mode == "client_ssl_server_ssl" ) && ( ssl.cert == "/Common/default.crt" || ssl.cert == "/Common/ca-bundle.crt" || ssl.cert == "/Common/f5-irule.crt" || ssl.key == "/Common/default.key" )) {
            message insecure_ssl_key_or_cert "You have selected a default BIG-IP certificate and/or key. This application service configuration is incomplete and will not be secure until you import and assign a trusted certificate and key that are valid for all fully qualified domain names used to access the application. See System > File Management > SSL Certificate List for importing certificates and keys. To select any new certificates and keys you import, you need to restart or reconfigure this template."
        }
        message external_url "You must configure the External URL setting on each View Server to use the IP address (or DNS name) of the BIG-IP virtual server (the address you specified clients will use to access the View deployment). For specific instructions, see the View 5 deployment guide: http://www.f5.com/pdf/deployment-guides/vmware-view5-iapp-dg.pdf"
        message apm_apply "If using BIG-IP APM, you may need to click the 'Apply Access Policy' link (in the upper left corner of the Configuration utility, to the right of the F5 logo) after running the iApp template."
        message troubleshooting "If you have deployed APM for secure network access and you are unable to login, ensure your AD domain name is entered correctly and your DNS Search Domain List entries are properly populated."
        message troubleshooting_1 "You can find common troubleshooting tips in the View 5 Deployment Guide: http://www.f5.com/pdf/deployment-guides/vmware-view-5-iapp-dg.pdf"
    
                    }
                    
                }}
                text {
                    intro "Welcome to the iApp template for VMware Horizon View"
                    intro.software_support "Software Support"
                    intro.software_support2 ""
                    
                    intro.hello "Introduction"
                    
                    intro.check_for_updates "Check for updates"
                    intro.prereqs_1 "Prerequisites"
                    intro.prereqs_2 ""
                    intro.prereqs_3 ""
                    intro.prereqs_4 ""
                    
        intro.prereqs_5 ""
        intro.analytics_opportunity "Additional features available"
        intro.apm_opportunity "Additional features available"
        intro.non_bash_warning "WARNING"
    
                    intro.v11_4_opportunity "Additional features available"

                    options "Template Options"
                    options.display_help "Do you want to see inline help?"
                    options.display_help_inline_help ""
                    options.advanced_mode "Which configuration mode do you want to use?"
                    options.conf_mode_inline_help ""
                    

                    apm "BIG-IP Access Policy Manager"
                    
        apm.use_apm "Do you want to deploy BIG-IP Access Policy Manager?"
        apm.use_apm_inline_note "NOTE"
        apm.use_apm_inline_help ""
        apm.use_html5 "Do you want to support browser based connections, including the View HTML 5 client?"
        apm.use_html5_inline_help ""
        apm.use_usb_redirection "Do you want to support USB redirection?"
        apm.use_usb_redirection_inline_help ""
        apm.use_securid "Should the BIG-IP system support SecurID or RADIUS with AD two-factor authentication?"
        apm.use_securid_inline_note "IMPORTANT"
        apm.use_securid_inline_help ""
        apm.securid_drop "Which AAA Server object do you want to use for SecurID?"
        apm.securid_drop_inline_help ""
        apm.use_securid_field3 "What label do want to use for the SecureID pin field?"
        apm.use_securid_field3_inline_help ""
        apm.radius_aaa_profile "Create a new RADIUS AAA Server object or select an existing one?"
        apm.radius_aaa_profile_inline_help ""
        apm.radius_server "Which RADIUS servers are used for second factor user credential authentication?"
        apm.radius_server.addr "IP"
        apm.radius_server_inline_help ""
        apm.auth_service_port "Which port are you using for your RADIUS servers?"
        apm.auth_service_port_inline_help ""
        apm.radius_secret "What password are you using for your shared secret?"
        apm.radius_secret_inline_help ""
        apm.radius_nas_ip "What IP are you using for your NAS-IP-address?"
        apm.radius_nas_ip_inline_help ""
        apm.radius_monitor "Create a new monitor for the RADIUS servers?"
        apm.radius_monitor_inline_help ""
        apm.radius_monitor_user "Which RADIUS user name should the monitor use?"
        apm.radius_monitor_user_inline_help ""
        apm.radius_monitor_password "What is associated password?"
        apm.radius_monitor_password_inline_help ""
        apm.radius_monitor_interval "How many seconds between RADIUS health checks?"
        apm.radius_monitor_interval_inline_help ""
        apm.use_radius_field3 "What label do want to use for the RADIUS password field?"
        apm.use_radius_field3_inline_help ""
        apm.use_disclaimer "Should the BIG-IP system show a message to View users during logon?"
        apm.disclaimer_message_inline_help ""
        apm.disclaimer_text "What message should be displayed to users?"
        apm.disclaimer_text_inline_help ""
        apm.nat_proxy_addr "If external clients use a network translated address to access View, what is the public-facing IP address?"
        apm.nat_proxy_addr_inline_help ""
        apm.use_smartcard "Should the BIG-IP APM support smart card authentication for Horizon View?"
        apm.use_smartcard_inline_help ""
        apm.idp_vs_addr "What virtual server IP address do you want to use for Horizon View server SAML requests?"
        apm.idp_host "What hostname is used to resolve to the IDP virtual server address?"
        apm.idp_vs_addr_inline_help ""
        apm.idp_host_inline_help ""
        apm.vcs_fqdn "What are the hostnames for your Horizon View Connection servers?"
        apm.vcs_fqdn.fqdn "Hostname"
        apm.vcs_fqdn_inline_help ""
        apm.idp_client_ssl_profile "Which Client SSL profile do you want to use for your SAML identity provider?"
        apm.idp_sslprofile_inline_help ""
        apm.idp_cert "Which SSL certificate do you want to use?"
        apm.idp_sslcert_inline_help ""
        apm.idp_sslcert_inline_help2 ""
        apm.idp_key "Which SSL private key do you want to use?"
        apm.idp_key_inline_help ""
        apm.idp_ssl_warn_1 "WARNING"
    
                    apm.aaa_profile "Create a new AAA Server object or select an existing one?"
                    apm.aaa_profile_help ""
                    apm.multiple_domain "Do you want the BIG-IP system to support multiple domains?"
                    apm.multiple_domain_inline_help ""
                    apm.multiple "Which AAA Server objects did you create for the Active Directory domains?"
                    apm.multiple.aaa_ad_servers ""
                    apm.multiple_aaa_ad_servers_inline_help ""
                    apm.active_directory_server "Which Active Directory servers (IP and host name) are used for user credential authentication?"
                    apm.active_directory_server.host "Host name"
                    apm.active_directory_server.addr "IP"
                    apm.active_directory_server_inline_help ""
                    apm.netbios_domain "What is your Active Directory domain name?"
                    apm.netbios_domain_inline_help ""
                    apm.netbios_name "What is the NetBIOS domain name for your environment?"
                    apm.netbios_name_inline_help_pcoip_html5 ""
                    apm.netbios_name_inline_help_pcoip ""
                    apm.netbios_name_inline_help ""
                    apm.credentials "Does your Active Directory domain require credentials?"
                    apm.binding_inline_help ""
                    apm.active_directory_username "Which Active Directory user with administrative permissions do you want to use?"
                    apm.ad_username_inline_help ""
                    apm.active_directory_password "What is the password associated with that account?"
                    apm.ad_password_inline_help ""
                    apm.ad_monitor "Create a new monitor for the Active Directory servers?"
                    apm.ad_monitor_user "Which Active Directory user name should the monitor use?"
                    apm.ad_monitor_user_inline_help ""
                    apm.ad_monitor_inline_help ""
                    apm.ad_monitor_password "What is associated password?"
                    apm.ad_monitor_password_inline_help ""
                    apm.ad_monitor_tree "What is the LDAP tree for this user account?"
                    apm.ad_monitor_tree_inline_help ""
                    apm.ad_monitor_secure "Does your Active Directory domain require a secure protocol for communication?"
                    apm.ad_monitor_secure_inline_help ""
                    apm.ad_monitor_interval "How many seconds between Active Directory health checks?"
                    apm.ad_monitor_interval_inline_help ""
                    apm.ad_monitor_port "Which port are you using for your Active Directory servers?"
                    apm.ad_monitor_port_secure "Which port are you using for your Active Directory servers?"
                    apm.ad_monitor_port_inline_help ""
                    apm.logging "Which APM logging profile do you want to use?"
                    apm.logging_inline_help ""
                    
        afm "Advanced Firewall Manager (BIG-IP AFM)"
        afm.policy "Do you want to use BIG-IP AFM to protect your application?"
        afm.policy_full ""
        afm.restrict_by_addr "Do you want to restrict access to your application by network or IP address?"
        afm.restrict_full ""
        afm.allowed_addr "What IP or network addresses should be allowed to access your application?"
        afm.allowed_addr_full_1 ""
        afm.allowed_addr_full_2 ""
        afm.security_logging "Which logging profile would you like to use?"
        afm.security_logging_full ""
        afm.security_logging1_full ""
        afm.restrict_by_reputation "How do you want to control access to your application from sources with a low reputation score?"
        afm.restrict_by_reputation_full ""
        afm.restrict_by_reputation_log ""
        afm.restrict_by_reputation_warn "IMPORTANT"
        afm.staging_policy "Would you like to stage a policy for testing purposes?"
        afm.staging_policy_full ""
        afm.staging_policy1_full "CRITICAL"
    
                    
                    
                    ssl "SSL Encryption"
                    ssl.mode "How should the BIG-IP system handle encrypted traffic?"
                    
        ssl.mode_1_inline_help ""
        ssl.mode_2_inline_help ""
        ssl.mode_3_inline_help ""
    
                    
        ssl.ca_bundle "Which CA certificate bundle do you want to use for your trusted certificate authorities?"
        ssl.ca_bundle_inline_help ""
        ssl.client_cert_ca "Which CA certificate bundle do you want to use for your advertised certificate authorities?"
        ssl.client_cert_ca_inline_help ""
    
                    ssl.cert "Which SSL certificate do you want to use?"
                    ssl.sslcert_inline_help ""
                    ssl.sslcert2_inline_help ""
                    ssl.key "Which SSL private key do you want to use?"
                    ssl.sslkey_inline_help ""
                    ssl.use_cert_chain "Which intermediate certificate do you want to use?"
                    ssl.use_cert_chain_1_inline_help ""
                    ssl.use_cert_chain_2_inline_help ""
                    ssl.ssl_warn_1 "CRITICAL"
                    ssl.ssl_warn_3 "NOTE:"
                    
        ssl.ssl_warn_2 "NOTE:"
    
                    ssl.redirect_to_https "Do you want to redirect inbound HTTP traffic to HTTPS?"
                    ssl.redirect_port "From which port should HTTP traffic be redirected?"
                    ssl.redirect_inline_help ""
                    ssl.redirect_port_inline_help ""
                    ssl.client_ssl_profile "Which Client SSL profile do you want to use?"
                    ssl.sslprofile_inline_help ""
                    ssl.server_ssl_profile "Which Server SSL profile do you want to use?"
                    ssl.bridging_inline_help ""

                    pcoip "PC Over IP"
                    pcoip.use_pcoip "Should PCoIP connections go through the BIG-IP system?"
                    pcoip.use_pcoip_inline_help ""
                    pcoip.forward "Will PCoIP connections be proxied by the View Security Servers?"
                    pcoip.forward_inline_help ""
                    pcoip.addr "On which network do the virtual desktops reside?"
                    pcoip.forward_addr_mask_inline_help ""
                    pcoip.mask "What is the network mask for the Virtual Desktops?"
                    pcoip.forward_mask_inline_help ""
                    pcoip.vlan_listening "Which VLANs should accept PCoIP traffic?"
                    pcoip.vlan_selections "Which VLANs do you want to specify?"
                    pcoip.pcoip_vlans_inline_help ""
                    pcoip.vlan_selections_inline_help ""
                    pcoip.forward_no_inline_help ""
                    pcoip.use_pcoip_no_inline_help ""
                    pcoip.ltm_use_html5 "Will VMware View HTML 5 client connections go through the BIG-IP system?"
                    pcoip.ltm_use_html5_inline_help ""

                    pool "Virtual Servers and Pools"
                    pool.vs_addr "What virtual server IP address do you want to use for remote, untrusted clients?"
                    pool.vs_addr_inline_help ""
                    pool.vs_addr_internal "What virtual server IP address do you want to use for local clients?"
                    pool.vs_addr_internal_inline_help ""
                    pool.vs_port "What service port do you want to use for the virtual server(s)?"
                    pool.ha_inline_help ""
                    pool.apm_addr_inline_help ""
                    pool.fqdn "What FQDN will clients use to access the View environment?"
                    pool.fqdn_inline_help ""
                    pool.persistence "Which persistence profile do you want to use?"
                    pool.persistence_inline_help ""
                    pool.pool_members "Which servers should be included in this pool?"
                    pool.pool_members_inline_help ""
                    pool.pool_members.addr "Node/IP address"
                    pool.pool_members.port "Port"
                    pool.pool_members.port_secure "Port"
                    pool.pool_members.connection_limit "Conn limit"
                    pool.pool_members.ratio "Ratio"
                    pool.pool_members.priority "Priority"
                    pool.lb_method_choice "Which load balancing method do you want to use?"
                    pool.lb_method_inline_help ""
                    pool.tcp_req_queuing "Should the BIG-IP system queue TCP requests?"
                    pool.tcp_queue_length "What is the maximum number of queued TCP requests?"
                    pool.tcp_queue_timeout "How many milliseconds should requests stay in the queue?"
                    pool.tcp_request_queue_1_inline_help "IMPORTANT"
                    pool.tcp_request_queue_2_inline_help ""
                    pool.tcp_request_note_inline_help ""
                    pool.tcp_request_timeout_inline_help ""
                    pool.use_slow_ramp "Use a Slow Ramp time for newly added servers?"
                    pool.slow_ramp_inline_help ""
                    pool.slow_ramp_setvalue "How many seconds should Slow Ramp time last?"
                    pool.slow_ramp_value_inline_help ""
                    pool.use_pga "Do you want to give priority to specific groups of servers?"
                    pool.pga_inline_help ""
                    pool.min_active_members "What is the minimum number of active members in a group?"
                    pool.min_active_members_inline_help ""
                    pool.same_subnet "Where will the virtual servers be in relation to the View servers?"
                    pool.subnet_1_inline_help ""
                    pool.subnet_2_inline_help ""
                    pool.subnet_3_inline_help ""
                    pool.bigip_route "How have you configured routing on your View servers?"
                    pool.def_rt_1_inline_help ""
                    pool.def_rt_2_inline_help ""
                    pool.def_rt_3_inline_help ""
                    pool.xff "Should the BIG-IP system insert the X-Forwarded-For header?"
                    pool.xff_inline_help ""
                    client "Client Optimization"
                    client.standard_caching "Which Web Acceleration profile do you want to use for caching?"
                    client.about_custom_caching_inline_help_1 ""
                    client.about_custom_caching_inline_help_2 ""
                    client.comp_inline_help ""
                    client.http_compression "Which HTTP compression profile do you want to use?"
                    client.tcp_opt "How do you want to optimize client-side connections?"
                    client.tcp_inline_help ""

                    server "Server Optimization"
                    server.oneconnect "Which OneConnect profile do you want to use?"
                    server.oc_inline_help ""
                    server.tcp_opt "How do you want to optimize server-side connections?"
                    server.tcp_inline_help ""

                    monitor "Application Health"
                    monitor.monitor_inline_help ""
                    monitor.monitor_inline_help2 ""
                    monitor.monitor "Create a new health monitor or use an existing one?"
                    monitor.user "What user name should the monitor use?"
                    monitor.user_inline_help ""
                    monitor.passwd "What is the password associated with that account?"
                    monitor.passwd_inline_help ""
                    monitor.netbios_name "What is the NetBIOS domain name for your environment?"
                    monitor.frequency "How many seconds should pass between health checks?"
                    monitor.freq_inline_help ""
                    monitor.netbios_name_inline_help ""
                    monitor.disclaimer "Do the View Connection Servers have a pre-login message enabled?"
                    monitor.disclaimer_inline_help ""
                    monitor.debug "Which logging level do you want to use for this monitor?"
                    monitor.debug_inline_help ""
                    monitor.application  "What published application(s) or pool(s) should the BIG-IP system expect in the monitor response?"
                    monitor.application.app "Published Resource Name"
                    monitor.application_inline_help ""
                    monitor.application_all "Do all published applications or desktop pools listed need to be available?"
                    monitor.application_all_inline_help ""

                    irules "iRules"
                    irules.irule_1_inline_help "CRITICAL"
                    irules.irule_2_inline_help ""
                    irules.irule_3_inline_help ""
                    irules.irules "Do you want to add any custom iRules to this configuration?"
                    irules.apm_irules "Do you want to add any custom iRules to the APM virtual server?"

                    stats "Statistics and Logging"
                    stats.analytics "Do you want to enable Analytics for application statistics?"
                    stats.avr_1_inline_help ""
                    stats.avr_2_inline_help ""
                    stats.avr_3_inline_help ""
                    stats.request_logging "Which HTTP request logging profile do you want to use?"
                    stats.req_log_inline_help ""

                    extra "Additional Steps"
                    extra.dns "Modifying your DNS Settings"
                    extra.ssloffload "Configuring SSL settings on the servers"
                    extra.insecure_ssl_key_or_cert "Default SSL cert/key"
                    extra.external_url "Configuring the View Servers"
                    extra.troubleshooting "Troubleshooting"
                    
        extra.apm_apply "Apply Access Policy"
        extra.troubleshooting_1 ""
    
                }
            }
            role-acl { admin manager resource-admin }
            run-as none
        }
    }
    requires-bigip-version-max none
    requires-bigip-version-min 11.5.0
    requires-modules { }
}
